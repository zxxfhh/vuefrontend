<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   viewBox="0 0 40 374"
   version="1.1"
   id="svg4330"
   width="40"
   height="374"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs2" />
  <g
     id="analogIndicator"
     transform="translate(0,16)">
    <rect
       style="fill:#cccccc;stroke:#000000;stroke-width:0.493445"
       id="baseIndicator"
       width="20"
       height="350"
       x="20"
       y="-3.75" />
    <rect
       style="fill:#00ff00;stroke:#000000;stroke-width:0.491786"
       id="normalIndicator"
       width="20"
       height="60"
       x="20"
       y="141.25" />
    <rect
       style="fill:#ff9500;stroke:#000000;stroke-width:0.491786"
       id="lowIndicator"
       width="20"
       height="60"
       x="20"
       y="286" />
    <rect
       style="fill:#ff9500;stroke:#000000;stroke-width:0.491787"
       id="highIndicator"
       width="20"
       height="60"
       x="20"
       y="-3.75" />
    <rect
       style="fill:#ff0000;stroke:#000000;stroke-width:0.487805"
       id="lowLowIndicator"
       width="20"
       height="20"
       x="20"
       y="326" />
    <rect
       style="fill:#ff0000;stroke:#000000;stroke-width:0.487805"
       id="highHighIndicator"
       width="20"
       height="20"
       x="20"
       y="-3.75" />
    <g
       id="movingGroup"
       transform="translate(0,-350)">
      <path
         style="fill:#808080;stroke:#000000;stroke-width:0.5;stroke-dasharray:none"
         id="movingIndicator"
         d="M 19.462117,346.01586 0.24,355.6272 v -19.22269 z" />
    </g>
    <g
       id="setpointGroup"
       transform="translate(0,-350)">
      <path
         style="fill:#b3b3b3;fill-rule:evenodd;stroke:#000000;stroke-width:0.462748;stroke-linejoin:round"
         id="setpointIndicator"
         d="m 29.695647,355.76884 -9.768278,-9.76874 9.768277,-9.76874 9.768276,9.76874 z" />
    </g>
  </g>
  <script type="text/javascript">
    <![CDATA[

    /*

    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end


    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa
    
    The scripts etc need to be within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>


    The below example is a moving analog visual indicator, when the moving indicator is close to the setpoint the system is okay
    and within the normal indicator range, when the process value moves away from the setpoint it will move towards the low or high
    range indicators or lowLow or highHigh

    You can dynamically adjust all these values and ranges including the colors from Fuxa 

    */

    //!export-start
    let _pn_value                   = 50;
    let _pn_setpoint                = 50;
    let _pn_minVal                  = 0;
    let _pn_maxVal                  = 100;
    let _pn_normalLow               = 40;
    let _pn_normalHigh              = 60;
    let _pn_highHigh                = 95;
    let _pn_high                    = 85;
    let _pn_low                     = 15;
    let _pn_lowLow                  = 5;
    let _pc_baseBackgroundColor     = '#cccccc';
    let _pc_movingIndicatorColor    = '#808080';
    let _pc_setpointIndicatorColor  = '#b3b3b3';
    let _pc_normalColor             = '#00ff00';
    let _pc_highHighColor           = '#ff0000';
    let _pc_highColor               = '#ff9500';
    let _pc_lowColor                = '#ff9500';
    let _pc_lowLowColor             = '#ff0000';
    //!export-end

    // Dynamically fetch the dimensions of the baseIndicator
    function getBaseDimensions() {
      const baseIndicator = document.getElementById('baseIndicator');
      const baseHeight = parseFloat(baseIndicator.getAttribute('height'));
      const baseY = parseFloat(baseIndicator.getAttribute('y'));
      return {
        baseHeight: baseHeight,
        baseY: baseY
      };
    }

    // Function to scale the value into the height of the baseIndicator
    function scaleValueToHeight(value, baseHeight) {
      const scaledValue = Math.min(Math.max(value, _pn_minVal), _pn_maxVal);
      return (scaledValue - _pn_minVal) / (_pn_maxVal - _pn_minVal) * baseHeight;
    }

    // Function to update the colors dynamically
    function updateColors() {
      document.getElementById('baseIndicator').style.fill       = _pc_baseBackgroundColor;
      document.getElementById('normalIndicator').style.fill     = _pc_normalColor;
      document.getElementById('highIndicator').style.fill       = _pc_highColor;
      document.getElementById('highHighIndicator').style.fill   = _pc_highHighColor;
      document.getElementById('lowIndicator').style.fill        = _pc_lowColor;
      document.getElementById('lowLowIndicator').style.fill     = _pc_lowLowColor;
      document.getElementById('movingIndicator').style.fill     = _pc_movingIndicatorColor;
      document.getElementById('setpointIndicator').style.fill   = _pc_setpointIndicatorColor;
    }

    function updateIndicators() {
      const { baseHeight, baseY } = getBaseDimensions(); // Get dynamic dimensions
    
      // Update lowLowIndicator
      const lowLowIndicator = document.getElementById('lowLowIndicator');
      const lowLowHeight = scaleValueToHeight(_pn_lowLow, baseHeight);
      lowLowIndicator.setAttribute('height', lowLowHeight);
      lowLowIndicator.setAttribute('y', baseY + baseHeight - lowLowHeight);
    
      // Update lowIndicator
      const lowIndicator = document.getElementById('lowIndicator');
      const lowHeight = scaleValueToHeight(_pn_low - _pn_lowLow, baseHeight);
      lowIndicator.setAttribute('height', lowHeight);
      lowIndicator.setAttribute('y', baseY + baseHeight - scaleValueToHeight(_pn_low, baseHeight));
    
      // Update normalIndicator
      const normalIndicator = document.getElementById('normalIndicator');
      const normalHeight = scaleValueToHeight(_pn_normalHigh - _pn_normalLow, baseHeight);
      normalIndicator.setAttribute('height', normalHeight);
      normalIndicator.setAttribute('y', baseY + baseHeight - scaleValueToHeight(_pn_normalHigh, baseHeight));
    
      // Update highIndicator
      const highIndicator = document.getElementById('highIndicator');
      const highHeight = scaleValueToHeight(_pn_maxVal - _pn_high, baseHeight); // Calculate from high to the top (max value)
      highIndicator.setAttribute('height', highHeight);
      highIndicator.setAttribute('y', baseY); // Start from the top of the base
    
      // Update highHighIndicator
      const highHighIndicator = document.getElementById('highHighIndicator');
      const highHighHeight = scaleValueToHeight(_pn_maxVal - _pn_highHigh, baseHeight); // Calculate height based on the highHigh value
      highHighIndicator.setAttribute('height', highHighHeight);
      highHighIndicator.setAttribute('y', baseY); // Start from the top of the base
    
      // Update setpointGroup position
      const setpointGroup = document.getElementById('setpointGroup');
      const setpointY = -(( _pn_setpoint - _pn_minVal) / (_pn_maxVal - _pn_minVal)) * baseHeight; // Scale the value to negative height
      setpointGroup.setAttribute('transform', `translate(0, ${Math.max(Math.min(setpointY, 0), -baseHeight)})`); // Adjust position based on base dimensions
      
      // Update movingGroup position
      const movingGroup = document.getElementById('movingGroup');
      const movingY = -(( _pn_value - _pn_minVal) / (_pn_maxVal - _pn_minVal)) * baseHeight; // Scale the value to negative height
      movingGroup.setAttribute('transform', `translate(0, ${Math.max(Math.min(movingY, 0), -baseHeight)})`); // Adjust position based on scaling


      // Update colors dynamically
      updateColors();
    }

    // Values from Fuxa can update the indicator dynamically
    function putValue(id, value) {
      if (id === '_pn_value'                    ) _pn_value                     = value;
      if (id === '_pn_setpoint'                 ) _pn_setpoint                  = value;
      if (id === '_pn_normalLow'                ) _pn_normalLow                 = value;
      if (id === '_pn_normalHigh'               ) _pn_normalHigh                = value;
      if (id === '_pn_lowLow'                   ) _pn_lowLow                    = value;
      if (id === '_pn_low'                      ) _pn_low                       = value;
      if (id === '_pc_baseBackgroundColor'      )  _pc_baseBackgroundColor      = value;
      if (id === '_pc_movingIndicatorColor'     ) _pc_movingIndicatorColor      = value;
      if (id === '_pc_setpointIndicatorColor'   ) _pc_setpointIndicatorColor    = value;
      if (id === '_pc_normalColor'              ) _pc_normalColor               = value;
      if (id === '_pc_highHighColor'            ) _pc_highHighColor             = value;
      if (id === '_pc_highColor'                ) _pc_highColor                 = value;
      if (id === '_pc_lowColor'                 ) _pc_lowColor                  = value;
      if (id === '_pc_lowLowColor'              ) _pc_lowLowColor               = value;
      updateIndicators(); // Recalculate and update after new values are set
    }

    function init() {
        updateIndicators(); // Initial call to set the values when the SVG loads
    }

    init();

    ]]>
  </script>
</svg>




















