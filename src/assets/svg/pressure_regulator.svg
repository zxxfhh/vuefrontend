<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
    <g id="frame">

		<rect fill="none" width="100" height="100"></rect>
	
</g>
<g id="shape">
	<path fill="#006837" d="M96.149,41.926v2.34v0.077H67.955V29.5h-3.104v6.096h-11.27l2.509,3.867v5.468H43.91v-5.468l2.509-3.867
		h-11.52V29.5h-4.104v14.843H3.851v-0.077v-2.34H0v2.34v11.468v2.34h3.851v-2.34v-0.077h26.945v14.454c0,0.605,0.895,1.5,2,1.5
		h33.16c1.105,0,2-0.895,2-2V55.657h28.195v0.077v2.34H100v-2.34V44.266v-2.34H96.149z"></path>
	<polygon fill="#006837" points="67.859,29.319 67.859,27.372 30.891,27.372 30.891,29.319 48.745,29.319 48.745,33.691 
		44.842,39.967 44.842,46.011 55.158,46.011 55.158,39.967 51.085,33.691 51.085,29.319 	"></polygon>
	<path fill="#006837" d="M45.148,17.494c-3.156,0-6.547-0.253-6.803-1.32l0.973-0.232c-0.013-0.053-0.037-0.086-0.046-0.095
		c0.473,0.463,4.652,0.897,10.969,0.468c2.696-0.182,5.255-0.49,7.206-0.868l0.19,0.982c-1.99,0.385-4.593,0.699-7.329,0.884
		C49.511,17.366,47.389,17.494,45.148,17.494z"></path>
	<path fill="#006837" d="M69.256,9.543H51.58V8.218h12.122c1.105,0,2-0.895,2-2V2.266c0-1.105-0.895-2-2-2H36.298
		c-1.105,0-2,0.895-2,2v3.952c0,1.105,0.895,2,2,2H48.42v1.324H29.494c-1.245,0-2.254,1.009-2.254,2.254v24.166c0,0.552,0.448,1,1,1
		h2.306V15.346H48.42v0.126H37.374v1.2h20.072c1.841,0.358,2.717,0.694,3,0.886c-0.381,0.275-1.619,0.646-3.57,0.989
		c-2.19-0.375-4.729-0.626-6.568-0.75c-1.921-0.129-11.525-0.684-11.963,1.139l-0.028,0.116l0.028,0.116
		c0.437,1.821,10.042,1.269,11.963,1.139c1.839-0.124,4.378-0.375,6.568-0.75c1.957,0.345,3.196,0.716,3.574,0.992
		c-0.378,0.276-1.618,0.646-3.575,0.992c-2.189-0.375-4.728-0.626-6.566-0.75c-1.921-0.129-11.525-0.687-11.963,1.139l-0.028,0.116
		l0.028,0.116c0.437,1.822,10.042,1.269,11.963,1.139c1.839-0.125,4.377-0.375,6.566-0.75c1.957,0.345,3.197,0.716,3.575,0.992
		c-0.378,0.276-1.618,0.646-3.575,0.992c-2.189-0.376-4.728-0.626-6.566-0.751c-1.921-0.13-11.525-0.684-11.963,1.139l-0.028,0.116
		l0.028,0.116c0.109,0.456,0.792,0.763,1.785,0.966h-2.756v1.2H62.46v-1.2h-1.072c-0.018-0.032-0.023-0.067-0.045-0.098
		c-0.273-0.372-1.046-0.7-2.094-0.983c1.047-0.284,1.82-0.612,2.094-0.984c0.116-0.157,0.17-0.336,0.158-0.513
		c0.012-0.177-0.042-0.355-0.158-0.513c-0.274-0.373-1.047-0.701-2.094-0.984c1.047-0.284,1.82-0.612,2.094-0.984
		c0.116-0.157,0.17-0.336,0.158-0.513c0.012-0.177-0.042-0.355-0.158-0.513c-0.274-0.373-1.046-0.701-2.093-0.984
		c1.046-0.283,1.819-0.612,2.093-0.984c0.116-0.157,0.17-0.336,0.157-0.513c0.011-0.164-0.034-0.33-0.133-0.479
		c-0.054-0.081-0.152-0.224-0.458-0.404h1.552v-1.2h-6.046c-0.041-0.007-0.077-0.013-0.119-0.02l-0.003,0.02H51.58v-0.126h16.625
		v21.617h2.306c0.552,0,1-0.448,1-1V11.797C71.511,10.552,70.502,9.543,69.256,9.543z M50.241,19.309
		c-5.334,0.361-9.143,0.109-10.484-0.257c1.341-0.365,5.149-0.617,10.484-0.257c1.064,0.071,2.059,0.159,2.978,0.257
		C52.3,19.149,51.305,19.237,50.241,19.309z M50.241,22.303c-5.334,0.36-9.144,0.108-10.484-0.257
		c1.341-0.365,5.151-0.62,10.484-0.257c1.063,0.071,2.058,0.159,2.976,0.257C52.298,22.144,51.305,22.23,50.241,22.303z
		 M50.241,24.782c1.064,0.072,2.06,0.159,2.978,0.257c-0.918,0.099-1.913,0.186-2.978,0.258c-5.335,0.36-9.142,0.109-10.484-0.258
		C41.099,24.675,44.909,24.422,50.241,24.782z M59.442,26.121h-7.033c1.442-0.139,3.028-0.33,4.466-0.577
		C57.959,25.735,58.822,25.934,59.442,26.121z"></path>
</g>
<g id="dark">
	<rect x="56.09" y="45.05" fill="#009245" width="43.91" height="9.9"></rect>

		<polygon fill="#009245" points="34.899,35.596 34.899,29.5 32.404,29.5 32.404,45.05 0,45.05 0,54.95 41.335,54.95 41.335,35.596 
					"></polygon>

</g>
<g id="light">
	<rect x="56.09" y="46.465" fill="#96D48D" width="43.91" height="7.07"></rect>
	<rect y="46.465" fill="#96D48D" width="34.825" height="7.07"></rect>

		<polygon fill="#96D48D" points="34.899,35.596 34.899,29.5 33.904,29.5 33.904,53.535 39.835,53.535 39.835,35.596 		"></polygon>

</g>
<g id="hlight">

		<path fill="#FFFFFF" d="M100,47.525H56.09v-8.063l-2.509-3.867h11.27V29.5H51.085v4.191l4.073,6.276v4.236l0.029-0.003
			c0.01,0.087-0.014,0.171-0.029,0.255v1.556h-0.53c0.362,0.305,0.585,0.65,0.563,1.04c0.031,0.555-0.416,1.023-1.086,1.406
			c0.685,0.398,1.112,0.869,1.086,1.391c0.032,0.556-0.416,1.024-1.086,1.407c0.685,0.398,1.112,0.869,1.086,1.391
			c0.031,0.552-0.41,1.019-1.073,1.4c0.663,0.381,1.104,0.848,1.073,1.399c0.026,0.521-0.401,0.992-1.086,1.391
			c0.67,0.383,1.118,0.852,1.086,1.407c0.026,0.521-0.401,0.992-1.086,1.391c0.67,0.383,1.117,0.852,1.086,1.406
			c0.031,0.556-0.416,1.024-1.086,1.407c0.685,0.398,1.112,0.868,1.086,1.391c0.032,0.556-0.416,1.024-1.086,1.407
			c0.592,0.345,0.973,0.745,1.053,1.185h0.933V52.475H100V47.525z"></path>
		<path fill="#FFFFFF" d="M45.827,51.253c0.303,0.24,1.744,0.594,4.254,0.223c0.43-0.063,0.83-0.141,1.198-0.227
			c-0.369-0.087-0.769-0.164-1.198-0.228C47.579,50.649,46.139,51.001,45.827,51.253z"></path>
		<path fill="#FFFFFF" d="M45.826,54.051c0.303,0.24,1.747,0.599,4.254,0.223c0.429-0.063,0.829-0.141,1.197-0.227
			c-0.368-0.087-0.768-0.164-1.197-0.228C47.579,53.446,46.139,53.8,45.826,54.051z"></path>
		<path fill="#FFFFFF" d="M45.827,48.455c0.303,0.24,1.747,0.596,4.254,0.223c0.43-0.063,0.83-0.141,1.198-0.227
			c-0.369-0.087-0.769-0.164-1.198-0.228C47.579,47.851,46.139,48.203,45.827,48.455z"></path>
		<path fill="#FFFFFF" d="M44.812,65.291l-0.006-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.774-0.597,2.731-0.765,4.988-0.43c0.942,0.14,1.902,0.368,2.724,0.667c0.8-0.327,1.246-0.657,1.275-0.837
			c-0.03-0.227-0.477-0.579-1.281-0.917c-0.906,0.322-1.923,0.543-2.719,0.661c-2.258,0.334-4.216,0.165-4.988-0.431
			c-0.313-0.242-0.403-0.516-0.423-0.703l-0.006-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.774-0.597,2.731-0.764,4.988-0.43c0.942,0.14,1.902,0.368,2.724,0.667c0.801-0.328,1.246-0.658,1.275-0.838
			c-0.03-0.227-0.479-0.58-1.286-0.919c-0.82,0.297-1.776,0.523-2.713,0.663c-2.258,0.335-4.215,0.167-4.988-0.43
			c-0.313-0.242-0.403-0.516-0.423-0.703l-0.006-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.772-0.596,2.729-0.766,4.988-0.431c0.799,0.119,1.821,0.341,2.73,0.665c0.797-0.326,1.24-0.655,1.27-0.835
			c-0.03-0.227-0.479-0.58-1.286-0.919c-0.82,0.297-1.776,0.523-2.713,0.663c-2.256,0.336-4.214,0.167-4.988-0.43
			c-0.313-0.242-0.403-0.516-0.423-0.703l-0.006-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.772-0.596,2.729-0.766,4.988-0.431c0.799,0.119,1.821,0.341,2.73,0.665c0.797-0.326,1.24-0.655,1.27-0.835
			c-0.03-0.227-0.477-0.579-1.282-0.916c-0.906,0.321-1.922,0.542-2.718,0.66c-2.255,0.336-4.214,0.167-4.988-0.43
			c-0.313-0.242-0.404-0.517-0.424-0.704l-0.005-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.774-0.597,2.731-0.765,4.988-0.43c0.799,0.119,1.82,0.341,2.729,0.665c0.797-0.327,1.241-0.656,1.271-0.835
			c-0.03-0.227-0.477-0.579-1.281-0.917c-0.906,0.322-1.923,0.543-2.719,0.661c-2.258,0.335-4.216,0.165-4.988-0.431
			c-0.313-0.242-0.403-0.516-0.423-0.703l-0.006-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.774-0.597,2.731-0.764,4.988-0.43c0.942,0.14,1.902,0.368,2.724,0.667c0.8-0.327,1.246-0.657,1.275-0.837
			c-0.03-0.227-0.477-0.579-1.281-0.917c-0.906,0.322-1.923,0.543-2.719,0.661c-2.258,0.335-4.216,0.165-4.988-0.431
			c-0.313-0.242-0.403-0.516-0.423-0.703l-0.006-0.053l0.006-0.053c0.02-0.188,0.11-0.461,0.423-0.703
			c0.774-0.597,2.731-0.764,4.988-0.43c0.942,0.14,1.902,0.368,2.724,0.667c0.8-0.327,1.246-0.657,1.275-0.837
			c-0.029-0.227-0.479-0.581-1.286-0.92c-0.82,0.297-1.776,0.523-2.713,0.663c-2.256,0.336-4.214,0.167-4.988-0.43
			c-0.167-0.13-0.268-0.267-0.332-0.397h-0.061v-0.15c-0.016-0.056-0.026-0.109-0.031-0.156l-0.006-0.053l0.006-0.053
			c0.005-0.047,0.015-0.1,0.031-0.156v-5.477l3.902-6.276V29.5H34.904v18.025H0v4.949h38.835V35.596h7.584l-2.509,3.867v26.968
			h2.428c-0.468-0.101-0.852-0.244-1.102-0.437C44.922,65.752,44.832,65.479,44.812,65.291z"></path>
		<path fill="#FFFFFF" d="M48.799,46.011H47.32C47.732,46.043,48.226,46.047,48.799,46.011z"></path>
		<path fill="#FFFFFF" d="M45.827,59.647c0.303,0.24,1.747,0.597,4.254,0.222c0.43-0.063,0.83-0.141,1.198-0.227
			c-0.369-0.087-0.769-0.164-1.198-0.228C47.582,59.044,46.14,59.396,45.827,59.647z"></path>
		<path fill="#FFFFFF" d="M50.223,66.425c-0.017,0.003-0.033,0.004-0.049,0.006h3.946c-0.176-0.183-0.572-0.428-1.167-0.671
			C52.044,66.084,51.022,66.306,50.223,66.425z"></path>
		<path fill="#FFFFFF" d="M45.827,56.85c0.303,0.24,1.747,0.597,4.254,0.222c0.43-0.063,0.83-0.141,1.198-0.227
			c-0.369-0.087-0.769-0.164-1.198-0.228C47.582,56.246,46.14,56.599,45.827,56.85z"></path>
		<path fill="#FFFFFF" d="M50.081,65.012c-2.501-0.373-3.941-0.02-4.254,0.231c0.303,0.24,1.747,0.596,4.254,0.223
			c0.43-0.063,0.83-0.142,1.199-0.228C50.911,65.152,50.511,65.075,50.081,65.012z"></path>
		<path fill="#FFFFFF" d="M45.827,62.445c0.303,0.24,1.747,0.595,4.254,0.223c0.43-0.063,0.83-0.141,1.198-0.227
			c-0.369-0.087-0.769-0.164-1.198-0.228C47.579,61.842,46.139,62.193,45.827,62.445z"></path>

</g>
<g id="shadow">
</g>
    </g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      //document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      //elem.setAttribute('fill', shadowColor);
      //});
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>