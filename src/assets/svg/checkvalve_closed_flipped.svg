<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g style="transform-origin: 0px 0px" transform="translate(100,0) rotate(0) scale(-1,1)">
    <g id="frame">
		<rect fill="none" width="100" height="100"></rect>
</g>
<g id="shape">
	<polygon fill="#006838" points="93.031,35.738 93.031,39.208 72.714,39.208 77.841,34.08 78.774,35.012 84.207,29.579 
		81.093,26.465 84.087,23.471 73.558,12.943 70.564,15.937 67.45,12.823 62.017,18.256 63.057,19.296 43.145,39.208 42.63,39.208 
		6.851,39.208 6.851,35.738 0.131,35.738 0.131,39.208 0.131,60.458 0.131,64.262 6.851,64.262 6.851,60.458 93.031,60.458 
		93.031,64.262 100,64.262 100,60.458 100,39.208 100,35.738 	"></polygon>
</g>
<g id="dark">
	<polygon fill="#009245" points="68.5,40.958 78.659,30.798 75.93,28.069 73.11,30.889 66.141,23.919 68.961,21.1 66.339,18.478 
		43.859,40.958 43.351,40.958 0.131,40.958 0.131,58.965 51.149,58.965 52.87,57.244 54.591,58.965 100,58.965 100,40.958 	"></polygon>
	
		<rect x="71.222" y="13.912" transform="matrix(0.7071 -0.7071 0.7071 0.7071 10.3644 56.4631)" fill="#009245" width="4.234" height="3.617"></rect>
</g>
<g id="light">
	<polygon fill="#96D48D" points="63.786,43.458 77.427,29.817 75.805,28.194 73.11,30.889 66.141,23.919 68.836,21.225 
		67.571,19.96 44.073,43.458 0.131,43.458 0.131,56.473 50.792,56.473 52.87,54.394 54.949,56.473 100,56.473 100,43.458 	"></polygon>
</g>
<g id="hlight">
	<polygon fill="#FFFFFF" points="58.898,45.458 74.327,30.029 74.148,29.851 73.11,30.889 66.141,23.919 67.179,22.882 
		66.934,22.637 44.114,45.458 0.131,45.458 0.131,54.458 50.434,54.458 52.87,52.022 	"></polygon>
	<polyline class="alt" id="alt_1" fill="#FFFFFF" points="52.87,52.022 55.306,54.458 100,54.458 100,45.458 58.898,45.458 	"></polyline>
</g>
<g id="shadow">
	
		<rect x="79.193" y="21.882" transform="matrix(0.7071 -0.7071 0.7071 0.7071 7.0632 64.4337)" fill="#004F2A" width="4.234" height="3.617"></rect>
	<polygon fill="#004F2A" points="61.737,43.103 50.884,53.956 47.681,53.381 43.903,49.603 43.328,46.401 54.182,35.547 	"></polygon>
	<g>
		<path fill="#004F2A" d="M59.474,43.256c-1.216,0-2.667-0.661-3.893-1.887c-1.928-1.929-2.462-4.418-1.214-5.667
			c1.25-1.248,3.738-0.716,5.667,1.214l0,0c1.928,1.929,2.462,4.418,1.214,5.667C60.792,43.038,60.172,43.256,59.474,43.256z
			 M56.142,36.524c-0.306,0-0.555,0.08-0.714,0.238c-0.55,0.551-0.147,2.184,1.214,3.546c1.361,1.361,2.996,1.764,3.545,1.214
			c0.55-0.551,0.147-2.184-1.214-3.546C58.004,37.008,56.897,36.524,56.142,36.524z"></path>
		<path fill="#004F2A" d="M61.556,41.185c-0.316,0-0.652-0.046-1.003-0.138c-0.996-0.263-2.023-0.887-2.894-1.756
			c-0.87-0.87-1.493-1.897-1.756-2.894c-0.3-1.14-0.107-2.124,0.542-2.773s1.637-0.843,2.772-0.542
			c0.997,0.263,2.024,0.886,2.894,1.756l0,0l0,0c0.87,0.87,1.494,1.897,1.756,2.894c0.3,1.139,0.108,2.123-0.542,2.772
			C62.876,40.954,62.267,41.185,61.556,41.185z M58.224,34.445c-0.31,0-0.559,0.081-0.717,0.239
			c-0.253,0.253-0.309,0.737-0.152,1.33c0.193,0.733,0.691,1.541,1.366,2.216c0.675,0.675,1.482,1.173,2.215,1.365
			c0.592,0.157,1.077,0.101,1.33-0.152c0.253-0.253,0.309-0.737,0.153-1.33c-0.193-0.732-0.691-1.54-1.366-2.215l0,0
			c-0.675-0.675-1.482-1.173-2.215-1.366C58.615,34.475,58.409,34.445,58.224,34.445z"></path>
		<path fill="#004F2A" d="M63.63,39.1c-1.216,0-2.667-0.662-3.892-1.888c-0.87-0.869-1.493-1.896-1.756-2.894
			c-0.3-1.139-0.107-2.123,0.542-2.772c1.249-1.248,3.738-0.716,5.667,1.214l0,0l0,0c0.87,0.869,1.493,1.896,1.756,2.894
			c0.3,1.139,0.107,2.123-0.542,2.772C64.949,38.881,64.328,39.1,63.63,39.1z M60.299,32.368c-0.307,0-0.556,0.08-0.715,0.238
			c-0.252,0.253-0.308,0.737-0.152,1.33c0.193,0.732,0.691,1.54,1.366,2.215c1.361,1.361,2.995,1.762,3.545,1.214
			c0.252-0.253,0.308-0.737,0.152-1.33c-0.193-0.732-0.691-1.54-1.366-2.215l0,0C62.161,32.852,61.055,32.368,60.299,32.368z"></path>
		<path fill="#004F2A" d="M65.708,37.021c-1.216,0-2.667-0.662-3.893-1.888c-0.87-0.87-1.493-1.897-1.756-2.894
			c-0.3-1.139-0.107-2.123,0.542-2.772c0.648-0.649,1.633-0.84,2.773-0.543c0.996,0.263,2.023,0.887,2.894,1.756l0,0
			c0.87,0.87,1.493,1.897,1.756,2.894c0.3,1.14,0.107,2.124-0.542,2.773C67.027,36.803,66.407,37.021,65.708,37.021z M62.381,30.289
			c-0.31,0-0.559,0.081-0.717,0.239c-0.253,0.253-0.309,0.737-0.153,1.33c0.193,0.732,0.691,1.54,1.366,2.215
			s1.482,1.173,2.215,1.366c0.593,0.153,1.078,0.1,1.33-0.152c0.253-0.253,0.309-0.737,0.152-1.33
			c-0.193-0.733-0.691-1.541-1.366-2.216c-0.675-0.675-1.483-1.173-2.215-1.365C62.772,30.317,62.565,30.289,62.381,30.289z"></path>
		<path fill="#004F2A" d="M67.787,34.942c-1.216,0-2.667-0.661-3.893-1.887c-1.929-1.93-2.462-4.419-1.214-5.667
			s3.736-0.716,5.667,1.214l0,0c1.928,1.929,2.462,4.418,1.214,5.667C69.106,34.725,68.485,34.942,67.787,34.942z M64.455,28.211
			c-0.306,0-0.555,0.08-0.714,0.238c-0.55,0.55-0.148,2.184,1.214,3.546c1.362,1.361,2.996,1.764,3.545,1.214
			c0.55-0.551,0.147-2.184-1.214-3.546C66.317,28.694,65.211,28.211,64.455,28.211z"></path>
		<path fill="#004F2A" d="M69.37,33.371c-0.316,0-0.652-0.046-1.003-0.139c-0.996-0.263-2.023-0.886-2.893-1.756
			c-0.87-0.869-1.494-1.896-1.756-2.894c-0.3-1.139-0.108-2.123,0.542-2.772c1.249-1.247,3.736-0.715,5.667,1.214l0,0
			c0.87,0.87,1.493,1.897,1.756,2.894c0.3,1.139,0.107,2.123-0.542,2.772C70.69,33.141,70.08,33.371,69.37,33.371z M66.038,26.632
			c-0.31,0-0.56,0.081-0.718,0.239c-0.253,0.253-0.309,0.737-0.152,1.33c0.193,0.732,0.691,1.54,1.366,2.215
			s1.482,1.173,2.215,1.366c0.593,0.156,1.078,0.1,1.33-0.152c0.253-0.253,0.309-0.737,0.153-1.33
			c-0.193-0.732-0.691-1.54-1.366-2.215c-0.675-0.675-1.482-1.173-2.215-1.366C66.429,26.661,66.222,26.632,66.038,26.632z"></path>
	</g>
</g>
    </g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>