<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
<g id="shape">
	<path fill="#BCBEC0" d="M51.711,93.586l-0.003,0.001v-0.555c1.07-0.384,3.714-1.37,4.349-1.954c0.657-0.604-1.972-1.551-4.349-2.25
		v-0.313c1.364-0.087,2.58-0.531,1.717-1.63c-0.66-0.841-1.264-1.655-1.717-2.279v-0.288c4.859,1.24,16.802,3.682,17.137-2.188
		c0.225-3.935-9.102,0.772-17.134,1.156l-0.003,0.001v-0.555c1.07-0.384,3.714-1.37,4.349-1.954c0.657-0.604-1.972-1.551-4.349-2.25
		v-33.83c5.969-0.238,10.53-1.503,10.53-3.032v-2.326c0-0.677-0.905-1.302-2.42-1.81l0.027-2.578
		c1.313-0.478,2.079-1.053,2.079-1.672v-1.274v-0.843h2.216c2.037,0,3.689-0.404,3.689-0.904v-8.408
		c0-0.499-1.652-0.903-3.689-0.903h-2.216v-5.481c0.709-0.399,1.107-0.839,1.107-1.302V5.511c0-0.146-0.043-0.289-0.119-0.43
		c0.006-0.039,0.012-0.078,0.012-0.118c0-0.468-0.407-0.912-1.135-1.314c-1.352-1.33-6.259-2.316-12.109-2.316
		c-5.849,0-10.757,0.986-12.109,2.316c-0.728,0.402-1.135,0.846-1.135,1.314c0,0.039,0.006,0.079,0.012,0.118
		c-0.076,0.141-0.119,0.284-0.119,0.43v8.655c0,0.463,0.398,0.903,1.107,1.302v17.813c0,0.622,0.775,1.201,2.101,1.68l-0.027,2.581
		c-1.496,0.506-2.388,1.126-2.388,1.799v2.326c0,1.529,4.561,2.794,10.53,3.032v33.291c-1.188,0.144-2.104,0.602-1.325,1.594
		c0.485,0.617,0.937,1.218,1.325,1.744v0.94l-0.052-0.136c-4.893-1.244-16.756-3.647-17.09,2.201
		c-0.225,3.936,9.109-0.775,17.142-1.157v0.703c-1.221,0.448-3.39,1.29-3.957,1.811c-0.621,0.571,1.694,1.448,3.957,2.133v0.466
		c-1.188,0.144-2.104,0.602-1.325,1.594c0.485,0.617,0.937,1.218,1.325,1.744v0.94l-0.052-0.136
		c-4.893-1.244-16.756-3.647-17.09,2.201c-0.225,3.936,9.109-0.775,17.142-1.157v0.703c-1.221,0.448-3.39,1.29-3.957,1.811
		c-0.801,0.736,3.281,1.983,5.836,2.668c1.373,0.368,5.264,0.276,3.891-1.472c-0.796-1.013-1.507-1.985-1.971-2.632
		c4.685,1.216,17.051,3.85,17.392-2.123C69.07,88.495,59.743,93.201,51.711,93.586z"></path>
</g>
<g id="light">
	<path fill="#F2F2F2" d="M61.714,20.949h2.426c2.037,0,3.689,0.404,3.689,0.903s-1.652,0.903-3.689,0.903h-2.426V20.949z"></path>
</g>
<g id="dark">

		<path fill="#6D6E71" d="M61.502,32.789c0.274-0.249,0.423-0.511,0.423-0.781V15.468c-0.13,0.073-0.272,0.145-0.423,0.215V32.789z"></path>
		<path fill="#6D6E71" d="M49.633,17.435v17.57c0.016,0,0.032,0,0.048,0c0.553,0,1.096-0.01,1.63-0.027v-17.57
			c-0.535,0.016-1.077,0.027-1.63,0.027C49.664,17.436,49.649,17.435,49.633,17.435z"></path>
		<path fill="#6D6E71" d="M60.546,33.389c0.17-0.08,0.326-0.162,0.467-0.246V15.888c-0.149,0.059-0.303,0.117-0.467,0.173V33.389z"></path>
		<path fill="#6D6E71" d="M38.21,33.057c0.234,0.154,0.52,0.301,0.849,0.441V16.141c-0.306-0.099-0.59-0.201-0.849-0.308V33.057z"></path>
		<path fill="#6D6E71" d="M37.437,32.007c0,0.194,0.078,0.383,0.221,0.566V15.58c-0.074-0.037-0.153-0.074-0.221-0.112V32.007z"></path>
		<path fill="#6D6E71" d="M52.372,34.932c0.613-0.034,1.209-0.079,1.784-0.134V17.243c-0.579,0.051-1.17,0.095-1.784,0.126V34.932z"></path>
		<path fill="#6D6E71" d="M44.049,34.669c0.57,0.072,1.166,0.134,1.784,0.184V17.296c-0.616-0.045-1.208-0.103-1.784-0.169V34.669z"></path>
		<path fill="#6D6E71" d="M39.739,33.756c0.325,0.111,0.68,0.215,1.062,0.314V16.603c-0.374-0.082-0.728-0.168-1.062-0.26V33.756z"></path>
		<path fill="#6D6E71" d="M57.404,34.333c0.373-0.074,0.727-0.154,1.062-0.239V16.624c-0.34,0.073-0.693,0.142-1.062,0.206V34.333z"></path>
		<path fill="#6D6E71" d="M41.607,34.26c0.472,0.102,0.976,0.194,1.508,0.277V17.011c-0.527-0.073-1.028-0.156-1.508-0.245V34.26z"></path>
		<path fill="#6D6E71" d="M46.894,34.927c0.506,0.029,1.022,0.051,1.55,0.064V17.42c-0.526-0.012-1.043-0.031-1.55-0.057V34.927z"></path>
		<path fill="#6D6E71" d="M55.09,34.697c0.525-0.063,1.029-0.136,1.508-0.216V16.959c-0.484,0.072-0.985,0.138-1.508,0.195V34.697z"></path>
		<path fill="#6D6E71" d="M59.145,33.909c0.306-0.091,0.588-0.187,0.849-0.287v-17.38c-0.268,0.08-0.552,0.156-0.849,0.229V33.909z"></path>

	<path fill="#808285" d="M49.533,88.357c-0.574-0.154-1.225-0.337-1.88-0.535v1.131c0,0.274,0.908,0.496,2.027,0.496
		c1.12,0,2.027-0.222,2.027-0.496v-0.438C50.901,88.567,50.044,88.494,49.533,88.357z"></path>
	<path fill="#6D6E71" d="M47.654,77.989c-1.188,0.144-2.104,0.602-1.325,1.594c0.485,0.617,0.937,1.218,1.325,1.744V77.989z"></path>
	<path fill="#6D6E71" d="M51.708,78.528v4.204c1.07-0.384,3.714-1.37,4.349-1.954C56.714,80.174,54.084,79.227,51.708,78.528z"></path>
	<path fill="#6D6E71" d="M47.654,88.288c-1.188,0.144-2.104,0.602-1.325,1.594c0.485,0.617,0.937,1.218,1.325,1.744V88.288z"></path>
	<path fill="#6D6E71" d="M51.708,88.828v4.204c1.07-0.384,3.714-1.37,4.349-1.954C56.714,90.474,54.084,89.527,51.708,88.828z"></path>
</g>
<g id="shadow">

		<path d="M46.32,3.41l6.551-1.422c-0.494-0.039-1.006-0.068-1.529-0.089c-0.019,0.012-0.031,0.033-0.055,0.038l-5.876,1.275
			L46.32,3.41z"></path>
		<path d="M41.802,2.82l-0.117-0.025c-0.162,0.049-0.313,0.099-0.459,0.151L41.802,2.82z"></path>
		<path d="M44.852,2.158c-0.867,0.113-1.659,0.255-2.358,0.422l0.208,0.045L44.852,2.158z"></path>
		<path d="M44.511,3.408l-5.117,1.111c0.025,0.121,0.076,0.241,0.169,0.358l5.857-1.271L44.511,3.408z"></path>
		<path d="M42.702,3.016L39.83,3.639c-0.196,0.155-0.332,0.316-0.403,0.482l4.184-0.908L42.702,3.016z"></path>
		<path d="M47.028,4.432l-6.044,1.312c0.218,0.084,0.449,0.165,0.704,0.241l5.742-1.246C47.198,4.649,47.058,4.544,47.028,4.432z"></path>
		<path d="M52.016,5.037L44.765,6.61c0.503,0.067,1.036,0.122,1.585,0.168l6.844-1.486L52.016,5.037z"></path>
		<path d="M54.094,5.488l-6.362,1.381c0.632,0.03,1.282,0.047,1.949,0.047c0.069,0,0.136-0.002,0.204-0.003l5.387-1.169
			L54.094,5.488z"></path>
		<path d="M49.681,5.043c-0.514,0-0.99-0.037-1.397-0.099L42.498,6.2c0.378,0.09,0.786,0.172,1.217,0.247l6.546-1.421
			C50.074,5.037,49.881,5.043,49.681,5.043z"></path>
		<path d="M56.173,5.548l3.709-0.805c0.067-0.116,0.113-0.234,0.113-0.354c0-0.059-0.02-0.117-0.036-0.175l-4.965,1.078
			L56.173,5.548z"></path>
		<path d="M57.072,5.744l0.805,0.175c0.633-0.203,1.14-0.43,1.5-0.675L57.072,5.744z"></path>
		<path d="M46.319,3.801l-6.412,1.391c0.136,0.1,0.3,0.196,0.484,0.29l6.836-1.484L46.319,3.801z"></path>
		<path d="M56.172,5.939l-4.201,0.912c1.992-0.111,3.762-0.362,5.131-0.71L56.172,5.939z"></path>
		<path d="M43.602,2.82l0.909,0.197l5.308-1.152c-0.046,0-0.091-0.002-0.138-0.002c-0.641,0-1.265,0.016-1.873,0.044L43.602,2.82z"></path>
		<path d="M48.128,3.802l7.097-1.54c-0.358-0.056-0.732-0.106-1.119-0.151l-6.887,1.495L48.128,3.802z"></path>
		<path d="M51.362,3.885l5.743-1.246c-0.28-0.071-0.572-0.14-0.885-0.202L50.18,3.748C50.625,3.769,51.025,3.818,51.362,3.885z"></path>
		<path d="M52.351,4.389c0,0.078-0.065,0.151-0.166,0.22l6.563-1.424c-0.253-0.114-0.549-0.221-0.868-0.323l-5.781,1.255
			C52.257,4.2,52.351,4.292,52.351,4.389z"></path>
		<path d="M54.094,5.097l5.675-1.232c-0.12-0.139-0.292-0.273-0.501-0.403l-6.353,1.379L54.094,5.097z"></path>

	<path fill="#231F20" d="M37.437,15.468v0.5c2.055,1.158,6.761,1.968,12.244,1.968c5.483,0,10.188-0.81,12.244-1.968v-0.5
		c-2.055,1.157-6.761,1.968-12.244,1.968C44.198,17.436,39.492,16.625,37.437,15.468z"></path>
	<path fill="#231F20" d="M49.681,36.28c-4.22,0-7.941-0.523-10.143-1.319l-0.034-0.493c-0.014,1.373,4.519,2.534,10.126,2.592
		s10.164-1.007,10.178-2.38l0.036,0.273C57.646,35.753,53.915,36.28,49.681,36.28z"></path>
	<path fill="#E6E6E6" stroke="#000000" stroke-width="0.2548" stroke-miterlimit="10" d="M49.681,94.7"></path>
	<path fill="#231F20" d="M47.654,45.698c0.661,0.026,1.335,0.044,2.027,0.044s1.366-0.017,2.027-0.044v-1
		c-0.661,0.026-1.335,0.044-2.027,0.044s-1.366-0.017-2.027-0.044"></path>
	<path fill="#E6E6E6" stroke="#000000" stroke-width="0.2548" stroke-miterlimit="10" d="M49.681,95.7"></path>
</g>
<g id="hlight">
	<path fill="#FFFFFF" d="M37.668,6.195c0,1.213,5.378,2.196,12.012,2.196s12.012-0.983,12.012-2.196
		c0,1.717-5.378,3.109-12.012,3.109S37.668,7.912,37.668,6.195z"></path>
	<line fill="none" stroke="#FFFFFF" stroke-width="0.5096" stroke-miterlimit="10" x1="49.303" y1="45.76" x2="49.303" y2="83.27"></line>
	<line fill="none" stroke="#FFFFFF" stroke-width="0.5096" stroke-miterlimit="10" x1="49.303" y1="89.5" x2="49.303" y2="93.77"></line>
	<path fill="#FFFFFF" d="M44.261,81.792c0,0-7.134-1.274-9.555-0.637c-2.42,0.637-3.694,2.038-3.822,3.057
		c-0.127,1.019,1.147-1.147,4.459-1.656C38.656,82.046,44.261,81.792,44.261,81.792z"></path>
	<path fill="#FFFFFF" d="M54.757,84.276c0,0,10.42,2.404,13.44-1.911c0,0-0.573,2.548-3.758,2.803
		C61.254,85.422,54.757,84.276,54.757,84.276z"></path>
	<path fill="#FFFFFF" d="M48.847,94.404c0,0-2.378,1.529-1.529,2.718c-2.718-0.679-3.624-1.128-1.529-1.826
		C47.319,94.786,48.847,94.404,48.847,94.404z"></path>
	<path fill="#FFFFFF" d="M44.261,92.047c0,0-7.134-1.274-9.555-0.637c-2.42,0.637-3.694,2.038-3.822,3.057s1.147-1.147,4.459-1.656
		C38.656,92.302,44.261,92.047,44.261,92.047z"></path>
	<path fill="#FFFFFF" d="M54.507,94.658c0,0,10.42,2.404,13.44-1.911c0,0-0.573,2.548-3.758,2.803S54.507,94.658,54.507,94.658z"></path>
	<path fill="#FFFFFF" d="M37.888,39.455c0,1.303,5.28,2.36,11.793,2.36s11.793-1.057,11.793-2.36c0,1.947-5.28,3.526-11.793,3.526
		S37.888,41.402,37.888,39.455z"></path>
	<path fill="#FFFFFF" d="M48.847,84.148c0,0-2.378,1.529-1.529,2.718c-2.718-0.679-3.624-1.128-1.529-1.826
		C47.319,84.531,48.847,84.148,48.847,84.148z"></path>
</g>
</g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>