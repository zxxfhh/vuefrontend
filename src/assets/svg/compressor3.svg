<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
	 
<g>
	<g id="shape">
			<path fill="#CCCCCC" d="M100.049,59.471c0-13.104-7.796-23.727-17.413-23.727H69.872v-1.283h3.638V19.165H55.857v-0.969
				c0-2.594-2.089-4.706-4.673-4.75c-0.248-2.198-2.111-3.907-4.375-3.907c-2.264,0-4.125,1.707-4.375,3.903h-2.992
				c-2.191-4.136-6.537-6.956-11.544-6.956c-7.211,0-13.057,5.846-13.057,13.057c0,4.696,2.481,8.812,6.202,11.113h-3.776v5.095
				C7.741,35.893,0.049,46.456,0.049,59.471c0,12.965,7.633,23.495,17.109,23.716v10.802h1.928h6.893h1.928l0.882-1.615v-9.176
				h46.527v9.176l0.882,1.615h1.927h6.893h1.928V82.465C94.477,79.852,100.049,70.549,100.049,59.471z M40.955,19.544
				c0-1.719-0.335-3.358-0.939-4.861h2.453c0.352,2.081,2.157,3.667,4.339,3.667c2.18,0,3.986-1.585,4.338-3.665
				c1.917,0.024,3.47,1.589,3.47,3.512v0.969H43.332v15.295h3.804v1.283H37.73v-5.088h-2.978
				C38.474,28.356,40.955,24.24,40.955,19.544z"></path>
	</g>
	<g id="linear">
			<linearGradient class="linear" id="SVGID_1_compressor3" gradientUnits="userSpaceOnUse" x1="50.0493" y1="40.0193" x2="50.0493" y2="81.4879">
				<stop offset="0" style="stop-color:#CCCCCC"></stop>
				<stop offset="1" style="stop-color:#4D4D4D"></stop>
			</linearGradient>
			<path class="linear" fill="url(#SVGID_1_compressor3)" d="M82.637,35.744c9.616,0,17.413,10.623,17.413,23.727s-7.796,23.727-17.413,23.727H17.462
				c-9.616,0-17.413-10.623-17.413-23.727s7.796-23.727,17.413-23.727H82.637z"></path>
			<linearGradient class="linear" id="SVGID_2_compressor3" gradientUnits="userSpaceOnUse" x1="27.8981" y1="8.8393" x2="27.8981" y2="31.6595">
				<stop offset="0" style="stop-color:#CCCCCC"></stop>
				<stop offset="1" style="stop-color:#4D4D4D"></stop>
			</linearGradient>
			<circle class="linear" fill="url(#SVGID_2_compressor3)" cx="27.898" cy="19.544" r="13.057"></circle>
	</g>
	<g id="dark">
			<rect x="47.135" y="34.357" fill="#666666" width="22.737" height="1.628"></rect>
			<path fill="#666666" d="M27.898,32.601c-2.515,0-4.862-0.713-6.855-1.944h-3.776v5.245H37.73v-5.245h-2.978
				C32.76,31.888,30.413,32.601,27.898,32.601z"></path>
			<circle fill="#666666" cx="46.808" cy="13.945" r="4.405"></circle>
			<rect x="43.332" y="19.165" fill="#808080" width="30.178" height="15.295"></rect>
			<path fill="#808080" d="M51.103,13.442H39.442c0.213,0.401,0.404,0.815,0.574,1.24h11.087c1.937,0,3.514,1.576,3.514,3.514v1.137
				h1.24v-1.137C55.857,15.575,53.724,13.442,51.103,13.442z"></path>
			<rect x="76.196" y="76.213" fill="#808080" width="10.748" height="17.776"></rect>
			<rect x="17.158" y="76.213" fill="#808080" width="10.748" height="17.776"></rect>
	</g>
	<g id="light">
			<circle fill="#B3B3B3" cx="71.215" cy="20.825" r="0.964"></circle>
			<circle fill="#B3B3B3" cx="45.742" cy="20.825" r="0.964"></circle>
			<circle fill="#B3B3B3" cx="71.215" cy="33.227" r="0.964"></circle>
			<circle fill="#B3B3B3" cx="45.742" cy="33.227" r="0.964"></circle>
	</g>
	<g id="shadow">
			<polygon fill="#000000" points="47.569,24.447 45.698,22.576 49.44,22.576 			"></polygon>
			<polygon points="52.343,24.447 50.472,22.576 54.213,22.576 			"></polygon>
			<polygon points="57.116,24.447 55.245,22.576 58.987,22.576 			"></polygon>
			<polygon points="62.136,24.447 60.265,22.576 64.007,22.576 			"></polygon>
			<polygon points="66.91,24.447 65.039,22.576 68.781,22.576 			"></polygon>
			<polygon points="69.813,22.576 71.683,24.447 71.683,22.576 			"></polygon>
			<polygon points="45.192,23.323 47.063,25.194 45.192,27.065 			"></polygon>
			<rect x="48.643" y="23.871" transform="matrix(0.7071 0.7071 -0.7071 0.7071 32.4494 -27.9519)" width="2.646" height="2.646"></rect>
			<rect x="53.416" y="23.871" transform="matrix(0.7071 0.7071 -0.7071 0.7071 33.8476 -31.3274)" width="2.646" height="2.646"></rect>
			<rect x="58.19" y="23.871" transform="matrix(0.7071 0.7071 -0.7071 0.7071 35.2458 -34.7029)" width="2.646" height="2.646"></rect>
			<rect x="63.21" y="23.871" transform="matrix(0.7071 0.7071 -0.7071 0.7071 36.716 -38.2524)" width="2.646" height="2.646"></rect>
			<rect x="67.984" y="23.871" transform="matrix(0.7071 0.7071 -0.7071 0.7071 38.1142 -41.6279)" width="2.646" height="2.646"></rect>
			<rect x="46.143" y="26.489" transform="matrix(0.7071 0.7071 -0.7071 0.7071 33.5685 -25.4172)" width="2.646" height="2.646"></rect>
			<rect x="50.916" y="26.489" transform="matrix(0.7071 0.7071 -0.7071 0.7071 34.9667 -28.7927)" width="2.646" height="2.646"></rect>
			<rect x="55.69" y="26.489" transform="matrix(0.7071 0.7071 -0.7071 0.7071 36.3649 -32.1682)" width="2.646" height="2.646"></rect>
			<rect x="60.71" y="26.489" transform="matrix(0.7071 0.7071 -0.7071 0.7071 37.8351 -35.7177)" width="2.646" height="2.646"></rect>
			<rect x="65.484" y="26.489" transform="matrix(0.7071 0.7071 -0.7071 0.7071 39.2333 -39.0933)" width="2.646" height="2.646"></rect>
			<polygon points="71.58,29.683 69.709,27.812 71.58,25.941 			"></polygon>
			<polygon points="45.089,28.663 45.089,30.534 46.959,30.534 			"></polygon>
			<polygon points="47.991,30.534 49.862,28.663 51.733,30.534 			"></polygon>
			<polyline points="52.765,30.534 54.636,28.663 56.507,30.534 			"></polyline>
			<polygon points="57.539,30.534 59.41,28.663 61.28,30.534 			"></polygon>
			<polygon points="62.559,30.534 64.429,28.663 66.3,30.534 			"></polygon>
			<polygon points="67.332,30.534 69.203,28.663 71.074,30.534 			"></polygon>
			<polygon fill="#4D4D4D" points="27.154,10.361 26.5,9.227 27.154,8.094 28.463,8.094 29.118,9.227 28.463,10.361 			"></polygon>
			<polygon fill="#4D4D4D" points="27.154,32.54 26.5,31.406 27.154,30.273 28.463,30.273 29.118,31.406 28.463,32.54 			"></polygon>
			<polygon fill="#4D4D4D" points="20.306,13.74 19.042,13.401 18.703,12.137 19.628,11.211 20.893,11.55 21.232,12.814 			"></polygon>
			<polygon fill="#4D4D4D" points="35.989,29.423 34.725,29.084 34.386,27.82 35.311,26.894 36.576,27.233 36.915,28.497 			"></polygon>
			<polygon fill="#4D4D4D" points="17.853,20.971 16.719,21.626 15.586,20.971 15.586,19.662 16.719,19.008 17.853,19.662 			"></polygon>
			<polygon fill="#4D4D4D" points="40.032,20.971 38.898,21.626 37.765,20.971 37.765,19.662 38.898,19.008 40.032,19.662 			"></polygon>
			<polygon fill="#4D4D4D" points="21.232,27.82 20.893,29.084 19.628,29.423 18.703,28.497 19.042,27.233 20.306,26.894 			"></polygon>
			<polygon fill="#4D4D4D" points="36.915,12.137 36.576,13.401 35.311,13.74 34.386,12.814 34.725,11.55 35.989,11.211 			"></polygon>
			<path fill="#333333" d="M76.196,93.989V76.213l-0.517-0.235c-0.368,4.366-0.892,7.095-1.473,7.095h1.109v9.301L76.196,93.989z"></path>
			<path fill="#333333" d="M27.906,93.989V76.213l0.517-0.235c0.368,4.366,0.892,7.095,1.473,7.095h-1.109v9.301L27.906,93.989z"></path>
			<rect x="78.124" y="83.241" fill="#666666" width="6.893" height="10.748"></rect>
			<rect x="19.085" y="83.241" fill="#666666" width="6.893" height="10.748"></rect>
	</g>
	<g id="hlight">
			<path fill="#CCCCCC" d="M46.808,10.418c-1.948,0-3.527,1.579-3.527,3.527s1.578,3.527,3.527,3.527
				c1.947,0,3.527-1.579,3.527-3.527S48.756,10.418,46.808,10.418z M46.978,14.662l-0.74-1.569l3.682-0.779L46.978,14.662z"></path>
			<polygon fill="#CCCCCC" points="26.797,10.003 26.142,8.87 26.797,7.736 28.106,7.736 28.76,8.87 28.106,10.003 			"></polygon>
			<polygon fill="#CCCCCC" points="26.797,32.182 26.142,31.048 26.797,29.915 28.106,29.915 28.76,31.048 28.106,32.182 			"></polygon>
			<polygon fill="#CCCCCC" points="19.949,13.382 18.684,13.043 18.345,11.779 19.271,10.853 20.535,11.192 20.874,12.456 			"></polygon>
			<polygon fill="#CCCCCC" points="35.631,29.065 34.367,28.726 34.028,27.462 34.954,26.536 36.218,26.875 36.557,28.139 			"></polygon>
			<polygon fill="#CCCCCC" points="17.495,20.614 16.361,21.268 15.228,20.614 15.228,19.305 16.361,18.65 17.495,19.305 			"></polygon>
			<polygon fill="#CCCCCC" points="39.674,20.614 38.54,21.268 37.407,20.614 37.407,19.305 38.54,18.65 39.674,19.305 			"></polygon>
			<polygon fill="#CCCCCC" points="20.874,27.462 20.535,28.726 19.271,29.065 18.345,28.139 18.684,26.875 19.949,26.536 			"></polygon>
			<polygon fill="#CCCCCC" points="36.557,11.779 36.218,13.043 34.954,13.382 34.028,12.457 34.367,11.192 35.631,10.853 			"></polygon>
	</g>
</g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>