<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
<g id="shape">
	<path fill="#808285" d="M69.015,7.59h-0.252h-2.271h-0.568c-0.694,0-1.262,0.227-1.262,0.505c0,0.278-0.568,0.505-1.262,0.505
		h-0.116v-1.85H52.813V6.368l0.96-0.876l-0.534-1.181l0.713-0.322c-0.432-0.956-0.472-1.044-0.94-2.08
		c-2.278-0.454-5.899,0.091-9.873,1.528c0.234-0.084,0.471-0.179,0.702-0.257l-0.706-1.561l-7.271,3.281l0.732,1.62c0,0,0,0,0.001,0
		c-3.128,1.869-5.47,3.943-6.521,5.739l0.948,2.096l0.707-0.32l0.534,1.181l1.119,0.63v1.075l4.542,2.586v5.236h2.25v0.75h1.304
		c-0.278,0-0.505,0.227-0.505,0.505v0.252v2.505v0.568c0,0.244,0.125,0.452,0.306,0.591h-0.726h-0.262c-0.55,0-1,0.45-1,1v0.262
		v2.28v0.558c0,0.694,0.227,1.262,0.505,1.262c0.185,0,0.34,0.263,0.428,0.635h-0.461h-3.174h-0.125c-0.55,0-1,0.45-1,1v2.542
		c0,0.55,0.45,1,1,1h0.125h1.146v0.595l-0.482-0.02l-0.622,0.301c-0.297,0.144-0.297,0.379,0,0.523l0.622,0.301l0.482,0.02v0.389
		l-0.482-0.02l-0.622,0.301c-0.297,0.144-0.297,0.379,0,0.523l0.622,0.301l0.482,0.02v0.389l-0.482-0.02l-0.622,0.301
		c-0.297,0.144-0.297,0.379,0,0.523l0.622,0.301l0.482,0.02v0.389l-0.482-0.02l-0.622,0.301c-0.297,0.144-0.297,0.379,0,0.523
		l0.622,0.301l0.482,0.02v0.389l-0.482-0.02l-0.622,0.301c-0.297,0.144-0.297,0.379,0,0.523l0.622,0.301l0.482,0.02v0.677h4.479
		v49.332l0.359,0.602c0.379,0.371,0.982,0.382,1.374,0.024l0.412-0.626V48.905h4.479v-0.217l0.499,0.021l0.622-0.301
		c0.297-0.144,0.297-0.379,0-0.523l-0.622-0.301l-0.499-0.021v-0.389l0.499,0.021l0.622-0.301c0.297-0.144,0.297-0.379,0-0.523
		l-0.622-0.301l-0.499-0.021V45.66l0.499,0.021l0.622-0.301c0.297-0.144,0.297-0.379,0-0.523l-0.622-0.301l-0.499-0.021v-0.389
		l0.499,0.021l0.622-0.301c0.297-0.144,0.297-0.379,0-0.523l-0.622-0.301l-0.499-0.021v-0.389l0.499,0.021l0.622-0.301
		c0.297-0.144,0.297-0.379,0-0.523l-0.622-0.301l-0.499-0.021v-1.054h0.748h0.398h0.125c0.55,0,1-0.45,1-1V36.91c0-0.55-0.45-1-1-1
		h-0.125h-0.398h-2h-1.32c0.088-0.372,0.243-0.635,0.428-0.635c0.278,0,0.505-0.568,0.505-1.262v-0.558v-2.28v-0.262
		c0-0.55-0.45-1-1-1h-0.262h-0.726c0.181-0.139,0.306-0.347,0.306-0.591v-0.563V26.25v-0.257c0-0.275-0.225-0.5-0.5-0.5h1.005v-0.75
		h2.25v-5.236l4.542-2.586v-0.583h10.471v-1.85H63.4c0.694,0,1.262,0.227,1.262,0.505c0,0.278,0.568,0.505,1.262,0.505h0.568h2.271
		h0.252c0.555,0,1.009-0.454,1.009-1.009v-0.252v-1.682v-2.019V8.851V8.599C70.024,8.044,69.57,7.59,69.015,7.59z M42.169,3.792
		c-0.591,0.232-1.187,0.482-1.786,0.753C40.982,4.273,41.578,4.023,42.169,3.792z M38.429,5.495
		c-0.011,0.006-0.021,0.012-0.032,0.017C38.408,5.507,38.418,5.501,38.429,5.495z"></path>
</g>
<g id="linear">
	<linearGradient class="linear" id="SVGID_1_sensor_rtd" gradientUnits="userSpaceOnUse" x1="30.2677" y1="13.4865" x2="53.7731" y2="13.4865">
		<stop offset="0" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<polygon class="linear" fill="url(#SVGID_1_sensor_rtd)" points="52.298,2.231 30.784,11.939 32.266,15.216 33.384,15.845 33.384,16.92 37.926,19.507 
		37.926,24.743 48.271,24.743 48.271,19.507 52.813,16.92 52.813,6.368 53.773,5.492 	"></polygon>
	<linearGradient class="linear" id="SVGID_2_sensor_rtd" gradientUnits="userSpaceOnUse" x1="57.4812" y1="6.7486" x2="57.4812" y2="16.3369">
		<stop offset="0" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_2_sensor_rtd)" d="M63.285,6.749H52.806c-0.623,0-1.128,2.146-1.128,4.794s0.505,4.794,1.128,4.794h10.479V6.749z"></path>
	<linearGradient class="linear" id="SVGID_3_sensor_rtd" gradientUnits="userSpaceOnUse" x1="36.4101" y1="41.8399" x2="50.1835" y2="41.8399">
		<stop offset="0.0159" style="stop-color:#6D6E71"></stop>
		<stop offset="0.1323" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_3_sensor_rtd)" d="M37.255,42.153l-0.622-0.301c-0.297-0.144-0.297-0.379,0-0.523l0.622-0.301l12.083,0.5l0.622,0.301
		c0.297,0.144,0.297,0.379,0,0.523l-0.622,0.301L37.255,42.153z"></path>
	<linearGradient class="linear" id="SVGID_4_sensor_rtd" gradientUnits="userSpaceOnUse" x1="36.4101" y1="43.3538" x2="50.1835" y2="43.3538">
		<stop offset="0.0159" style="stop-color:#6D6E71"></stop>
		<stop offset="0.1323" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_4_sensor_rtd)" d="M37.255,43.666l-0.622-0.301c-0.297-0.144-0.297-0.379,0-0.523l0.622-0.301l12.083,0.5l0.622,0.301
		c0.297,0.144,0.297,0.379,0,0.523l-0.622,0.301L37.255,43.666z"></path>
	<linearGradient class="linear" id="SVGID_5_sensor_rtd" gradientUnits="userSpaceOnUse" x1="36.4101" y1="44.8678" x2="50.1835" y2="44.8678">
		<stop offset="0.0159" style="stop-color:#6D6E71"></stop>
		<stop offset="0.1323" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_5_sensor_rtd)" d="M37.255,45.18l-0.622-0.301c-0.297-0.144-0.297-0.379,0-0.523l0.622-0.301l12.083,0.5l0.622,0.301
		c0.297,0.144,0.297,0.379,0,0.523l-0.622,0.301L37.255,45.18z"></path>
	<linearGradient class="linear" id="SVGID_6_sensor_rtd" gradientUnits="userSpaceOnUse" x1="36.4101" y1="46.3817" x2="50.1835" y2="46.3817">
		<stop offset="0.0159" style="stop-color:#6D6E71"></stop>
		<stop offset="0.1323" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_6_sensor_rtd)" d="M37.255,46.694l-0.622-0.301c-0.297-0.144-0.297-0.379,0-0.523l0.622-0.301l12.083,0.5l0.622,0.301
		c0.297,0.144,0.297,0.379,0,0.523l-0.622,0.301L37.255,46.694z"></path>
	<linearGradient class="linear" id="SVGID_7_sensor_rtd" gradientUnits="userSpaceOnUse" x1="36.4101" y1="47.8957" x2="50.1835" y2="47.8957">
		<stop offset="0.0159" style="stop-color:#6D6E71"></stop>
		<stop offset="0.1323" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_7_sensor_rtd)" d="M37.255,48.208l-0.622-0.301c-0.297-0.144-0.297-0.379,0-0.523l0.622-0.301l12.083,0.5l0.622,0.301
		c0.297,0.144,0.297,0.379,0,0.523l-0.622,0.301L37.255,48.208z"></path>
	<linearGradient class="linear" id="SVGID_8_sensor_rtd" gradientUnits="userSpaceOnUse" x1="33.3842" y1="18.2136" x2="52.8132" y2="18.2136">
		<stop offset="0" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<polygon class="linear" fill="url(#SVGID_8_sensor_rtd)" points="33.384,16.92 37.926,19.507 48.271,19.507 52.813,16.92 	"></polygon>
	<linearGradient class="linear" id="SVGID_9_sensor_rtd" gradientUnits="userSpaceOnUse" x1="42.2156" y1="74.0145" x2="44.3604" y2="74.0145">
		<stop offset="0" style="stop-color:#FFFFFF"></stop>
		<stop offset="1" style="stop-color:#000000"></stop>
	</linearGradient>
	<path class="linear" fill="url(#SVGID_9_sensor_rtd)" d="M42.216,48.905v49.332l0.359,0.602c0.379,0.371,0.982,0.382,1.374,0.024l0.412-0.626V48.905H42.216z
		"></path>
</g>
<g id="dark">
	<path fill="#B3B3B3" d="M69.015,15.496c0.555,0,1.009-0.454,1.009-1.009v-1.934c0-0.555-0.454-1.009-1.009-1.009h-2.523
		c-0.555,0-1.009,0.454-1.009,1.009v1.934c0,0.555,0.454,1.009,1.009,1.009H69.015z"></path>
	<path fill="#B3B3B3" d="M45.517,25.993c0-0.275-0.225-0.5-0.5-0.5h-1.271c-0.275,0-0.5,0.225-0.5,0.5v2.766
		c0,0.275,0.225,0.5,0.5,0.5h1.271c0.275,0,0.5-0.225,0.5-0.5V25.993z"></path>
	<path fill="#B3B3B3" d="M47.199,30.913c0-0.55-0.45-1-1-1h-1.953c-0.55,0-1,0.45-1,1v2.542c0,0.55,0.45,1,1,1h1.953
		c0.55,0,1-0.45,1-1V30.913z"></path>
	<path fill="#999999" d="M51.11,36.91c0-0.55-0.45-1-1-1h-0.523c-0.55,0-1,0.45-1,1v2.542c0,0.55,0.45,1,1,1h0.523
		c0.55,0,1-0.45,1-1V36.91z"></path>
	<path fill="#B3B3B3" d="M48.587,36.91c0-0.55-0.45-1-1-1h-5.822c-0.55,0-1,0.45-1,1v2.542c0,0.55,0.45,1,1,1h5.822
		c0.55,0,1-0.45,1-1V36.91z"></path>
</g>
<g id="light">
	<path fill="#CCCCCC" d="M70.024,8.599c0-0.555-0.454-1.009-1.009-1.009h-2.523c-0.555,0-1.009,0.454-1.009,1.009v1.934
		c0,0.555,0.454,1.009,1.009,1.009h2.523c0.555,0,1.009-0.454,1.009-1.009V8.599z"></path>
	<path fill="#CCCCCC" d="M30.077,12.258l0.948,2.096L53.952,3.989c-0.432-0.956-0.472-1.044-0.94-2.08L30.077,12.258z"></path>
	<path fill="#E6E7E8" d="M36.466,35.91c-0.55,0-1,0.45-1,1v2.542c0,0.55,0.45,1,1,1h3.299c0.55,0,1-0.45,1-1V36.91
		c0-0.55-0.45-1-1-1H36.466z"></path>
	<path fill="#CCCCCC" d="M41.48,25.493c-0.278,0-0.505,0.227-0.505,0.505v2.757c0,0.278,0.227,0.505,0.505,0.505h1.262
		c0.278,0,0.505-0.227,0.505-0.505v-2.757c0-0.278-0.227-0.505-0.505-0.505H41.48z"></path>
	<path fill="#CCCCCC" d="M40.293,29.913c-0.55,0-1,0.45-1,1v2.542c0,0.55,0.45,1,1,1h1.953c0.55,0,1-0.45,1-1v-2.542
		c0-0.55-0.45-1-1-1H40.293z"></path>
	<path fill="#CCCCCC" d="M40.383,4.544c1.172-0.53,2.332-0.983,3.458-1.365l-0.706-1.561l-7.271,3.281l0.732,1.62
		C37.76,5.824,39.027,5.157,40.383,4.544z"></path>
</g>
<g id="shadow">
	<path fill="#999999" d="M51.11,36.91c0-0.55-0.45-1-1-1h-0.523c-0.55,0-1,0.45-1,1v2.542c0,0.55,0.45,1,1,1h0.523
		c0.55,0,1-0.45,1-1V36.91z"></path>
	<rect x="40.176" y="24.742" fill="#58595B" width="5.845" height="0.75"></rect>
</g>
<g id="hlight">
	<path fill="none" stroke="#FFFFFF" stroke-width="0.5" stroke-linecap="round" stroke-miterlimit="10" d="M43.5,6.201
		l-10.267,4.633"></path>
	
		<line fill="none" stroke="#FFFFFF" stroke-width="0.5" stroke-linecap="round" stroke-miterlimit="10" x1="43.135" y1="1.618" x2="35.865" y2="4.899"></line>
	<path fill="#FFFFFF" d="M39.765,35.91c0.55,0,1,0.45,1,1c0-0.55,0.45-1,1-1H39.765z"></path>
	<path fill="none" stroke="#FFFFFF" stroke-width="0.5" stroke-linecap="round" stroke-miterlimit="10" d="M40.765,36.16h-4.299"></path>
	<path fill="#FFFFFF" d="M34.75,9.833c0.333-1.083,1.75-3.167,1.75-3.167L40,4.833c0,0,1.583,0.583,2.75,1.667L34.75,9.833z"></path>
</g>
</g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>