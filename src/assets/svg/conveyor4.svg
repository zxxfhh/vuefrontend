<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
<g id="shape">
	<path fill="#B3B3B3" d="M93.315,35.948H6.975c-3.277,0-5.933,2.656-5.933,5.933c0,2.8,1.942,5.141,4.551,5.765l0.717,2.197
		c-0.903,0.954-1.466,2.235-1.466,3.653c0,2.942,2.385,5.326,5.326,5.326c0.189,0,0.368-0.036,0.552-0.056v13.235H6.674v2.292
		h11.262V71.98h-3.935V57.184c0.606-0.63,1.044-1.411,1.283-2.278h1.194c0.826,0,1.495-0.669,1.495-1.495s-0.669-1.495-1.495-1.495
		h-1.215v0.104c-0.244-0.839-0.672-1.597-1.261-2.21v-1.995h71.661v24.187h-4.048v2.292h11.262v-2.313h-3.935V47.816h4.375
		c3.277,0,5.933-2.656,5.933-5.933C99.248,38.604,96.591,35.948,93.315,35.948z M93.315,37.256c-1.37,0-2.588,0.607-3.435,1.554
		h-2.681c-0.276-0.703-0.956-1.203-1.757-1.203s-1.481,0.5-1.757,1.203h-8.252c-0.276-0.703-0.956-1.203-1.757-1.203
		s-1.481,0.5-1.757,1.203h-8.251c-0.276-0.703-0.956-1.203-1.757-1.203s-1.481,0.5-1.757,1.203h-8.252
		c-0.276-0.703-0.956-1.203-1.757-1.203s-1.481,0.5-1.757,1.203h-8.252c-0.276-0.703-0.956-1.203-1.757-1.203
		s-1.481,0.5-1.757,1.203H28.37c-0.276-0.703-0.956-1.203-1.757-1.203s-1.481,0.5-1.757,1.203h-8.252
		c-0.276-0.703-0.956-1.203-1.757-1.203s-1.481,0.5-1.757,1.203h-2.68c-0.847-0.947-2.065-1.554-3.435-1.554H93.315z M14,46.506
		v-3.631h71.661v3.631H14z M88.94,46.506v-3.188c0.607,1.846,2.325,3.188,4.374,3.188H88.94z"></path>
</g>
<g id="light">
	<path fill="#E6E6E6" d="M93.315,39.568c-0.386,0-0.745,0.104-1.065,0.271l-2.111-1.029H9.219l-1.535,0.88
		c-0.225-0.073-0.46-0.122-0.709-0.122c-1.277,0-2.313,1.035-2.313,2.313c0,1.277,1.035,2.313,2.313,2.313
		c0.92,0,1.707-0.541,2.08-1.319h1.666v-3.25H14v3.25h71.661v-3.25h3.279v3.25h2.294c0.373,0.778,1.16,1.319,2.08,1.319
		c1.277,0,2.313-1.035,2.313-2.313C95.627,40.604,94.592,39.568,93.315,39.568z"></path>
</g>
<g id="dark">
	<line fill="none" x1="88.94" y1="71.98" x2="88.94" y2="47.815"></line>
	<line fill="none" x1="87.94" y1="71.98" x2="87.94" y2="47.815"></line>
	<g>
		<rect x="13" y="39.625" fill="#808080" width="1" height="32.355"></rect>
		<rect x="87.94" y="39.625" fill="#808080" width="1" height="32.355"></rect>
	</g>
</g>
<g id="shadow">
	<g>
		<path d="M7.412,53.029c0.198-1.172,1.117-2.091,2.289-2.289v-1.682c-2.099,0.22-3.751,1.872-3.971,3.971L7.412,53.029
			L7.412,53.029z"></path>
		<path d="M9.701,56.253c-1.172-0.198-2.091-1.117-2.289-2.289H5.73c0.22,2.099,1.872,3.75,3.971,3.971V56.253z"></path>
		<g>
			<path d="M14,51.235v1.794h0.607C14.538,52.375,14.317,51.773,14,51.235z"></path>
			<path d="M14,53.964v1.794c0.317-0.538,0.538-1.14,0.607-1.794H14z"></path>
		</g>
	</g>
	<g>
		<rect x="14" y="41.95" width="71.661" height="0.925"></rect>
	</g>
</g>
<g id="hlight">
	<polygon fill="#FFFFFF" points="91.314,36.448 8.975,36.448 6.975,35.948 93.314,35.948 	"></polygon>
</g>
</g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>