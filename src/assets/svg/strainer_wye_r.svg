<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
    <g id="shape">
	<polyline fill="#006837" points="32.226,60.278 16.783,75.721 40.859,99.797 80.378,60.278 	"></polyline>
	<path fill="#006837" d="M0,35.738h10.372v28.524H0"></path>
	<path fill="#006837" d="M89.628,35.738H100v28.524H89.628"></path>
	
		<rect x="26.139" y="74.311" transform="matrix(0.7071 -0.7071 0.7071 0.7071 -53.4113 46.27)" fill="#006837" width="6.017" height="26.594"></rect>
	
		<rect x="22.742" y="87.376" transform="matrix(0.7071 -0.7071 0.7071 0.7071 -56.8083 44.8633)" fill="#006837" width="6.017" height="7.258"></rect>
	<polygon fill="#006837" points="48.937,39.5 50.325,40.888 50.391,40.917 51.808,39.5 100,39.5 100,60.5 0,60.5 0,39.5 	"></polygon>
</g>
<g id="dark">
	<polygon fill="#009245" points="19.556,75.653 20.926,77.024 21.871,76.079 40.676,94.884 39.731,95.828 40.828,96.926 
		79.105,58.649 76.91,58.649 42.068,93.492 23.263,74.687 39.301,58.649 36.561,58.649 	"></polygon>
	<polygon fill="#009245" points="48.55,41 50.325,42.775 50.391,42.804 52.196,41 100,41 100,59 0,59 0,41 	"></polygon>
</g>
<g id="light">
	<polygon fill="#96D48D" points="0,43.5 48.542,43.5 50.305,45.263 50.399,45.304 52.203,43.5 100,43.5 100,56.5 78.962,56.5 
		79.011,56.549 42.068,93.492 23.263,74.687 41.45,56.5 0,56.5 	"></polygon>
</g>
<g id="hlight">
	<polygon fill="#FFFFFF" points="24.763,76.187 40.722,92.146 78.368,54.5 100,54.5 100,45.5 52.451,45.5 50.397,47.554 
		50.31,47.516 48.294,45.5 0,45.5 0,54.5 46.45,54.5 	"></polygon>
</g>
<g id="shadow">
	<path fill="#006837" d="M23.263,74.686l18.805,18.805l31.169-31.169L54.432,43.518L23.263,74.686z M30.376,73.814
		c-0.662,0.662-1.517,0.879-1.91,0.486c-0.393-0.393-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486S31.038,73.152,30.376,73.814z
		 M33.702,70.488c-0.662,0.662-1.517,0.88-1.91,0.486s-0.175-1.249,0.486-1.91c0.662-0.662,1.517-0.879,1.91-0.486
		S34.363,69.826,33.702,70.488z M36.563,64.127c-0.661,0.661-1.424,0.971-1.703,0.692s0.031-1.042,0.692-1.703
		c0.661-0.661,1.424-0.971,1.703-0.692S37.224,63.466,36.563,64.127z M37.027,67.163c-0.662,0.662-1.517,0.879-1.91,0.486
		c-0.393-0.394-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486C37.906,65.646,37.689,66.501,37.027,67.163z M37.206,71.058
		c-0.662,0.662-1.577,0.819-2.045,0.351c-0.468-0.468-0.311-1.383,0.351-2.045c0.662-0.662,1.577-0.819,2.045-0.351
		C38.025,69.481,37.868,70.396,37.206,71.058z M36.061,73.244c0.661-0.661,1.642-0.752,2.191-0.204s0.458,1.53-0.204,2.191
		c-0.661,0.661-1.642,0.753-2.191,0.204C35.309,74.886,35.4,73.905,36.061,73.244z M39.97,60.72
		c-0.661,0.661-1.424,0.971-1.703,0.692s0.031-1.042,0.692-1.703s1.424-0.971,1.703-0.692C40.941,59.296,40.631,60.059,39.97,60.72z
		 M40.353,63.837c-0.662,0.662-1.517,0.879-1.91,0.486c-0.393-0.393-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486
		C41.232,62.32,41.014,63.175,40.353,63.837z M40.584,67.681c-0.662,0.662-1.577,0.819-2.045,0.351
		c-0.468-0.468-0.311-1.383,0.351-2.045s1.577-0.819,2.045-0.351C41.403,66.103,41.246,67.019,40.584,67.681z M53.521,61.639
		c0-0.936,0.758-1.694,1.694-1.694s1.694,0.758,1.694,1.694s-0.759,1.694-1.694,1.694C54.279,63.333,53.521,62.575,53.521,61.639z
		 M54.828,65.166c0.661-0.661,1.642-0.752,2.191-0.204s0.457,1.53-0.204,2.191s-1.642,0.753-2.191,0.204
		C54.076,66.809,54.167,65.828,54.828,65.166z M50.031,68.517c0,0.936-0.758,1.694-1.694,1.694s-1.694-0.759-1.694-1.694
		c0-0.936,0.759-1.694,1.694-1.694C49.273,66.823,50.031,67.582,50.031,68.517z M48.327,64.952
		c-0.661,0.661-1.642,0.752-2.191,0.204s-0.457-1.53,0.204-2.191c0.661-0.661,1.642-0.753,2.191-0.204
		C49.08,63.31,48.988,64.291,48.327,64.952z M49.765,59.54c0.661-0.661,1.642-0.752,2.191-0.204s0.457,1.53-0.204,2.191
		s-1.642,0.753-2.191,0.204C49.013,61.182,49.104,60.201,49.765,59.54z M53.47,65.079c0,0.936-0.758,1.694-1.694,1.694
		s-1.694-0.759-1.694-1.694c0-0.936,0.759-1.694,1.694-1.694C52.711,63.385,53.47,64.143,53.47,65.079z M53.191,56.114
		c0.661-0.661,1.642-0.753,2.191-0.204c0.549,0.548,0.457,1.53-0.204,2.191c-0.661,0.661-1.642,0.753-2.191,0.204
		C52.439,57.756,52.53,56.775,53.191,56.114z M53.424,70.545c-0.661,0.661-1.642,0.753-2.191,0.204
		c-0.549-0.548-0.457-1.53,0.204-2.191s1.642-0.753,2.191-0.204C54.176,68.903,54.085,69.884,53.424,70.545z M50.59,77.807
		c-0.662,0.662-1.577,0.819-2.045,0.351c-0.468-0.468-0.31-1.384,0.351-2.045c0.662-0.662,1.577-0.819,2.045-0.351
		S51.252,77.145,50.59,77.807z M47.84,74.142c-0.549-0.548-0.458-1.53,0.204-2.191c0.661-0.661,1.642-0.752,2.191-0.204
		s0.457,1.53-0.204,2.191C49.369,74.599,48.389,74.69,47.84,74.142z M47.212,81.185c-0.662,0.662-1.577,0.819-2.045,0.351
		s-0.31-1.384,0.351-2.045c0.662-0.662,1.577-0.819,2.045-0.351C48.031,79.607,47.874,80.523,47.212,81.185z M44.448,77.534
		c-0.549-0.548-0.457-1.53,0.204-2.191s1.642-0.752,2.191-0.204s0.457,1.53-0.204,2.191C45.977,77.991,44.996,78.083,44.448,77.534z
		 M43.204,71.956c0-0.936,0.759-1.694,1.694-1.694c0.936,0,1.694,0.758,1.694,1.694s-0.758,1.694-1.694,1.694
		C43.963,73.65,43.204,72.892,43.204,71.956z M44.901,68.378c-0.661,0.661-1.642,0.752-2.191,0.204s-0.457-1.53,0.204-2.191
		s1.642-0.753,2.191-0.204S45.562,67.717,44.901,68.378z M43.247,80.722c-0.661,0.661-1.642,0.752-2.191,0.204
		s-0.458-1.53,0.204-2.191c0.661-0.661,1.642-0.753,2.191-0.204C43.999,79.08,43.908,80.061,43.247,80.722z M39.765,75.395
		c0-0.936,0.759-1.694,1.694-1.694c0.936,0,1.694,0.759,1.694,1.694c0,0.936-0.758,1.694-1.694,1.694
		C40.524,77.089,39.765,76.331,39.765,75.395z M39.284,72.008c-0.549-0.548-0.457-1.53,0.204-2.191s1.642-0.753,2.191-0.204
		c0.549,0.548,0.457,1.529-0.204,2.191C40.813,72.466,39.833,72.556,39.284,72.008z M43.377,57.313
		c-0.661,0.661-1.424,0.971-1.703,0.692s0.031-1.042,0.692-1.703s1.424-0.971,1.703-0.692S44.038,56.652,43.377,57.313z
		 M43.678,60.512c-0.662,0.662-1.517,0.879-1.91,0.486s-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486
		C44.557,58.995,44.34,59.85,43.678,60.512z M43.962,64.303c-0.662,0.662-1.577,0.819-2.045,0.351
		c-0.468-0.468-0.311-1.383,0.351-2.045s1.577-0.819,2.045-0.351C44.78,62.726,44.623,63.641,43.962,64.303z M46.784,53.905
		c-0.661,0.661-1.424,0.971-1.703,0.692s0.031-1.042,0.692-1.703s1.424-0.971,1.703-0.692
		C47.756,52.482,47.445,53.244,46.784,53.905z M47.004,57.186c-0.662,0.662-1.517,0.88-1.91,0.486s-0.175-1.249,0.486-1.91
		c0.662-0.662,1.517-0.879,1.91-0.486C47.883,55.669,47.665,56.524,47.004,57.186z M47.339,60.925
		c-0.662,0.662-1.577,0.819-2.045,0.351s-0.311-1.383,0.351-2.045s1.577-0.819,2.045-0.351
		C48.158,59.348,48.001,60.263,47.339,60.925z M50.192,50.498c-0.661,0.661-1.424,0.971-1.703,0.692s0.031-1.042,0.692-1.703
		s1.424-0.971,1.703-0.692C51.163,49.075,50.853,49.837,50.192,50.498z M50.329,53.86c-0.662,0.662-1.517,0.879-1.91,0.486
		c-0.393-0.394-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486C51.208,52.344,50.991,53.199,50.329,53.86z M50.717,57.548
		c-0.662,0.662-1.577,0.819-2.045,0.351c-0.468-0.468-0.311-1.383,0.351-2.045c0.662-0.662,1.577-0.819,2.045-0.351
		C51.536,55.97,51.379,56.886,50.717,57.548z M52.231,49.11c0.662-0.662,1.517-0.88,1.91-0.486s0.175,1.249-0.486,1.91
		c-0.662,0.662-1.517,0.879-1.91,0.486C51.352,50.627,51.569,49.772,52.231,49.11z M53.599,47.091
		c-0.661,0.661-1.424,0.971-1.703,0.692s0.03-1.042,0.692-1.703c0.661-0.661,1.424-0.971,1.703-0.692S54.26,46.43,53.599,47.091z
		 M54.095,54.17c-0.662,0.662-1.577,0.819-2.045,0.351c-0.468-0.468-0.311-1.383,0.351-2.045c0.662-0.662,1.577-0.819,2.045-0.351
		C54.913,52.593,54.756,53.508,54.095,54.17z M57.472,50.792c-0.662,0.662-1.577,0.819-2.045,0.351s-0.311-1.383,0.351-2.045
		c0.662-0.662,1.577-0.819,2.045-0.351S58.134,50.13,57.472,50.792z M58.605,54.674c-0.661,0.661-1.642,0.753-2.191,0.204
		c-0.549-0.548-0.457-1.529,0.204-2.191c0.661-0.661,1.642-0.753,2.191-0.204C59.358,53.032,59.266,54.013,58.605,54.674z
		 M60.348,58.201c0,0.936-0.759,1.694-1.694,1.694c-0.936,0-1.694-0.759-1.694-1.694c0-0.936,0.758-1.694,1.694-1.694
		C59.589,56.507,60.348,57.265,60.348,58.201z M58.221,61.774c0.661-0.661,1.642-0.752,2.191-0.204s0.457,1.53-0.204,2.191
		c-0.661,0.661-1.642,0.753-2.191,0.204S57.56,62.435,58.221,61.774z M63.787,54.762c0,0.936-0.759,1.694-1.694,1.694
		c-0.936,0-1.694-0.759-1.694-1.694c0-0.936,0.758-1.694,1.694-1.694C63.028,53.068,63.787,53.826,63.787,54.762z M63.601,60.368
		c-0.661,0.661-1.642,0.752-2.191,0.204s-0.458-1.53,0.204-2.191c0.661-0.661,1.642-0.753,2.191-0.204
		C64.353,58.726,64.262,59.707,63.601,60.368z M69.659,62.925c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703
		c-0.661,0.661-1.424,0.971-1.703,0.692C68.687,64.349,68.998,63.586,69.659,62.925z M66.222,66.362
		c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703c-0.661,0.661-1.424,0.971-1.703,0.692S65.561,67.023,66.222,66.362
		z M66.096,62.988c0.662-0.662,1.517-0.879,1.91-0.486c0.393,0.393,0.176,1.248-0.486,1.91c-0.662,0.662-1.517,0.879-1.91,0.486
		C65.217,64.505,65.434,63.65,66.096,62.988z M65.785,59.224c0.662-0.662,1.577-0.819,2.045-0.351
		c0.468,0.468,0.31,1.383-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351C64.966,60.801,65.123,59.886,65.785,59.224z
		 M62.785,69.798c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703c-0.661,0.661-1.424,0.971-1.703,0.692
		S62.124,70.459,62.785,69.798z M64.126,67.806c-0.662,0.662-1.517,0.88-1.91,0.486s-0.175-1.249,0.486-1.91
		c0.662-0.662,1.517-0.879,1.91-0.486C65.005,66.289,64.788,67.144,64.126,67.806z M62.407,62.602
		c0.662-0.662,1.577-0.819,2.045-0.351c0.468,0.468,0.311,1.384-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351
		C61.589,64.179,61.745,63.264,62.407,62.602z M60.733,71.198c-0.662,0.662-1.517,0.88-1.91,0.486s-0.176-1.249,0.486-1.91
		c0.662-0.662,1.517-0.879,1.91-0.486C61.613,69.682,61.395,70.537,60.733,71.198z M59.349,73.235
		c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703s-1.424,0.971-1.703,0.692
		C58.377,74.659,58.688,73.896,59.349,73.235z M59.03,65.979c0.662-0.662,1.577-0.819,2.045-0.351
		c0.468,0.468,0.311,1.384-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351C58.211,67.557,58.368,66.641,59.03,65.979z
		 M57.34,74.591c-0.662,0.662-1.517,0.879-1.91,0.486c-0.393-0.393-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486
		C58.22,73.075,58.002,73.93,57.34,74.591z M55.912,76.672c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703
		s-1.424,0.971-1.703,0.692C54.941,78.095,55.251,77.333,55.912,76.672z M55.652,69.357c0.662-0.662,1.577-0.819,2.045-0.351
		s0.311,1.384-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351S54.99,70.019,55.652,69.357z M53.948,77.984
		c-0.662,0.662-1.517,0.879-1.91,0.486c-0.393-0.393-0.175-1.248,0.486-1.91c0.662-0.662,1.517-0.879,1.91-0.486
		C54.827,76.468,54.609,77.323,53.948,77.984z M52.475,80.108c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703
		s-1.424,0.971-1.703,0.692S51.814,80.769,52.475,80.108z M52.274,72.735c0.662-0.662,1.577-0.819,2.045-0.351
		s0.31,1.384-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351C51.456,74.312,51.612,73.397,52.274,72.735z M50.555,81.377
		c-0.662,0.662-1.517,0.879-1.91,0.486c-0.393-0.393-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486
		C51.434,79.86,51.217,80.715,50.555,81.377z M49.039,83.545c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703
		s-1.424,0.971-1.703,0.692S48.378,84.206,49.039,83.545z M47.162,84.77c-0.662,0.662-1.517,0.88-1.91,0.486
		s-0.176-1.248,0.486-1.91s1.517-0.879,1.91-0.486S47.824,84.108,47.162,84.77z M45.602,86.982c0.661-0.661,1.424-0.971,1.703-0.692
		s-0.031,1.042-0.692,1.703s-1.424,0.971-1.703,0.692C44.631,88.405,44.941,87.643,45.602,86.982z M43.835,84.562
		c-0.662,0.662-1.577,0.819-2.045,0.351s-0.31-1.384,0.351-2.045c0.662-0.662,1.577-0.819,2.045-0.351S44.497,83.901,43.835,84.562z
		 M43.769,88.163c-0.662,0.662-1.517,0.88-1.91,0.486s-0.175-1.249,0.486-1.91c0.662-0.662,1.517-0.879,1.91-0.486
		C44.648,86.646,44.43,87.501,43.769,88.163z M42.165,90.418c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.042-0.692,1.703
		s-1.424,0.971-1.703,0.692S41.504,91.079,42.165,90.418z M38.764,86.246c0.662-0.662,1.577-0.819,2.045-0.351
		c0.468,0.468,0.311,1.383-0.351,2.045s-1.577,0.819-2.045,0.351S38.102,86.907,38.764,86.246z M37.867,82.128
		c0.661-0.661,1.642-0.752,2.191-0.204s0.457,1.53-0.204,2.191s-1.642,0.753-2.191,0.204S37.206,82.789,37.867,82.128z
		 M36.326,78.834c0-0.936,0.759-1.694,1.694-1.694c0.936,0,1.694,0.759,1.694,1.694c0,0.936-0.758,1.694-1.694,1.694
		C37.085,80.528,36.326,79.77,36.326,78.834z M32.887,82.273c0-0.936,0.758-1.694,1.694-1.694s1.694,0.759,1.694,1.694
		c0,0.936-0.758,1.694-1.694,1.694C33.646,83.967,32.887,83.208,32.887,82.273z M32.635,76.669c0.661-0.661,1.642-0.753,2.191-0.204
		c0.549,0.548,0.457,1.53-0.204,2.191s-1.642,0.753-2.191,0.204C31.883,78.312,31.974,77.33,32.635,76.669z M32.135,72.741
		c0.662-0.662,1.577-0.819,2.045-0.351c0.468,0.468,0.311,1.384-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351
		C31.316,74.319,31.473,73.403,32.135,72.741z M32.144,66.524c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.041-0.692,1.703
		c-0.661,0.661-1.424,0.971-1.703,0.692C31.173,67.947,31.483,67.185,32.144,66.524z M28.757,76.119
		c0.662-0.662,1.577-0.819,2.045-0.351c0.468,0.468,0.311,1.384-0.351,2.045c-0.662,0.662-1.577,0.819-2.045,0.351
		C27.939,77.696,28.095,76.781,28.757,76.119z M28.737,69.931c0.661-0.661,1.424-0.971,1.703-0.692s-0.031,1.041-0.692,1.703
		c-0.661,0.661-1.424,0.971-1.703,0.692S28.076,70.592,28.737,69.931z M24.638,75.041c-0.279-0.279,0.031-1.042,0.692-1.703
		s1.424-0.971,1.703-0.692s-0.031,1.041-0.692,1.703C25.68,75.01,24.917,75.32,24.638,75.041z"></path>
</g>
<g id="frame">
	<rect y="0" fill="none" width="100" height="100"></rect>
</g>
    </g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>