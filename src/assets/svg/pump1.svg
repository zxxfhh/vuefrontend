<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
	<rect id="frame" x="0" y="0" fill="none" width="100" height="100"></rect>
	<g id="shape">
		<path fill="#999999" d="M88.921,0.307H59.795V5.34h4.483v12.226c-4.369-1.926-9.197-3.004-14.279-3.004
			c-19.572,0-35.438,15.866-35.438,35.438c0,15.887,10.454,29.331,24.859,33.831v10.004h-5.224v6.222h31.607v-6.221h-5.224V83.832
			c14.404-4.5,24.859-17.944,24.859-33.831V5.34h3.483V0.307z"></path>
	</g>
	<g id="linear">
	</g>
	<g id="dark">
		<path fill="#808080" d="M83.132,5.34h-17.47v2.488c1.674-0.477,4.818-1.158,9.166-1.158c3.664,0,6.491,0.484,8.305,0.922v25.322
			c-3.793-7.342-9.951-11.761-17.471-15.248v0.555c8.553,4.224,15.153,11.793,18.094,21.002c0.082,0.257,0.16,0.515,0.236,0.774
			c0.191,0.648,0.371,1.301,0.525,1.965c0.04,0.172,0.071,0.347,0.109,0.52c0.13,0.601,0.245,1.208,0.344,1.821
			c0.031,0.19,0.065,0.378,0.092,0.569c0.106,0.733,0.19,1.473,0.25,2.219c0.014,0.171,0.024,0.343,0.036,0.515
			c0.053,0.792,0.09,1.589,0.09,2.395V38.416V8.284V5.34H83.132z"></path>
		<path fill="#808080" d="M33.731,67.191c1.654,1.747,3.573,3.24,5.689,4.421v-0.437C37.329,70.127,35.412,68.783,33.731,67.191z"></path>
		<path fill="#808080" d="M74.597,50.923c0-6.772-2.848-12.875-7.406-17.191c4.016,4.242,6.484,9.966,6.484,16.268
			c0,9.271-5.333,17.293-13.096,21.178v1.358C68.839,68.841,74.597,60.557,74.597,50.923z"></path>
		<path fill="#808080" d="M64.972,50.923c0-4.115-1.78-7.804-4.598-10.374c2.276,2.497,3.676,5.807,3.676,9.452
			c0,3.535-1.315,6.756-3.471,9.226v1.884C63.28,58.55,64.972,54.938,64.972,50.923z"></path>
		<path fill="#808080" d="M51.081,39.476c0.15,0.015,0.295,0.046,0.444,0.068C51.376,39.522,51.231,39.491,51.081,39.476z"></path>
		<path fill="#808080" d="M60.579,50.001c0-5.112-3.627-9.379-8.449-10.365c0.688,0.141,1.351,0.348,1.983,0.616
			c-0.872-0.233-1.785-0.369-2.731-0.369c-0.262,0-0.518,0.021-0.775,0.039c1.419,1.253,4.854,4.863,4.854,10.476
			c0,5.542,0,32.181,0,43.438h5.118V50.001z"></path>
		<path fill="#808080" d="M51.383,39.883c0.946,0,1.858,0.136,2.731,0.369c-0.632-0.267-1.296-0.475-1.983-0.616
			c-0.199-0.041-0.403-0.063-0.606-0.092c-0.148-0.021-0.293-0.052-0.444-0.068c-0.356-0.036-0.716-0.055-1.081-0.055
			c0,0,0.24,0.175,0.608,0.5C50.864,39.903,51.121,39.883,51.383,39.883z"></path>
	</g>
	<g id="light">
		<polygon fill="#8C8C8C" points="61.955,76.033 63.492,73.371 66.566,73.371 68.103,76.032 66.566,78.694 63.492,78.694 		"></polygon>
		<polygon fill="#8C8C8C" points="18.404,52.663 16.867,50.001 18.404,47.338 21.477,47.338 23.014,50.001 21.477,52.663 		"></polygon>
		<polygon fill="#8C8C8C" points="78.522,52.663 76.985,50.001 78.522,47.338 81.596,47.338 83.132,50.001 81.596,52.663 		"></polygon>
		<polygon fill="#8C8C8C" points="36.507,78.694 33.433,78.694 31.896,76.032 33.433,73.37 36.507,73.371 38.044,76.032 		"></polygon>
		<polygon fill="#8C8C8C" points="66.566,26.63 63.492,26.63 61.955,23.968 63.492,21.307 66.566,21.307 68.103,23.969 		"></polygon>
		<polygon fill="#8C8C8C" points="31.896,23.969 33.433,21.307 36.507,21.307 38.044,23.969 36.507,26.63 33.433,26.631 		"></polygon>
		<polygon fill="#8C8C8C" points="23.968,68.104 21.306,66.567 21.306,63.493 23.968,61.956 26.63,63.493 26.63,66.567 		"></polygon>
		<polygon fill="#8C8C8C" points="76.032,38.045 73.37,36.508 73.37,33.434 76.032,31.897 78.693,33.434 78.694,36.508 		"></polygon>
		<polygon fill="#8C8C8C" points="52.661,21.478 50,23.014 47.337,21.478 47.337,18.405 50,16.868 52.662,18.405 		"></polygon>
		<polygon fill="#8C8C8C" points="21.306,36.508 21.305,33.434 23.968,31.897 26.63,33.434 26.629,36.508 23.968,38.045 		"></polygon>
		<polygon fill="#8C8C8C" points="73.37,66.568 73.37,63.493 76.032,61.957 78.693,63.493 78.693,66.567 76.031,68.104 		"></polygon>
	</g>
	<g id="shadow">
		<path fill="#666666" d="M60.579,59.227v24.587c0.779-0.244,1.55-0.506,2.306-0.801V55.597
			C62.306,56.928,61.521,58.147,60.579,59.227z"></path>
		<path fill="#666666" d="M60.579,50.001c0-5.842-4.737-10.579-10.58-10.579h-0.922c5.843,0,10.58,4.737,10.58,10.579v43.835h0.922
			C60.579,93.836,60.579,50.001,60.579,50.001z"></path>
	</g>
	<g id="hlight">
		<path fill="#B3B3B3" d="M15.522,50.461h-1c0-19.816,16.122-35.938,35.938-35.938v1C31.195,15.524,15.522,31.197,15.522,50.461z"></path>
		<path fill="#B3B3B3" d="M26.824,50h-1c0-13.33,10.845-24.175,24.176-24.175v1C37.221,26.826,26.824,37.222,26.824,50z"></path>
		<path fill="#B3B3B3" d="M36.449,50h-1c0-8.022,6.527-14.55,14.551-14.55v1C42.528,36.451,36.449,42.529,36.449,50z"></path>
		<path fill="#B3B3B3" d="M65.662,18.21V8.179h-1.383v9.387C64.745,17.772,65.206,17.985,65.662,18.21z"></path>
		<polygon fill="#B3B3B3" points="63.023,1.229 88.921,1.229 88.921,0.307 59.795,0.307 59.795,5.34 63.023,5.34 		"></polygon>
		<path fill="#B3B3B3" d="M50,39.421c0.365,0,0.726,0.019,1.081,0.055C50.725,39.44,50.365,39.421,50,39.421z"></path>
		<path fill="#B3B3B3" d="M51.525,39.544c0.202,0.029,0.407,0.052,0.606,0.092C51.932,39.595,51.727,39.573,51.525,39.544z"></path>
		<path fill="#B3B3B3" d="M50.607,39.922c-0.368-0.325-0.608-0.5-0.608-0.5c-5.843,0-10.58,4.737-10.58,10.579v43.835h1.383V50.462
			C40.803,44.881,45.128,40.32,50.607,39.922z"></path>
		<polygon fill="#B3B3B3" points="39.268,94.758 65.803,94.758 65.803,93.836 34.196,93.836 34.196,100.057 39.268,100.057 		"></polygon>
	</g>
</g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>