<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 

<g>
    <g id="shape">
	<path fill="#006837" d="M94.628,38.736V42H71.731v-2.335h4.519V29.637h-2.042v-1.576h-4.387v1.576h-2.113v-1.576h-4.387v1.576
		h-5.613v-1.576h-4.387v1.576H46.5v-1.576h-4.387v1.576H36.5v-1.576h-4.387v1.576H30v-1.576h-4.387v1.576H23.75v10.028h4.519V42
		H5.372v-3.264H0V42v16v3.264h5.372V58h22.897v25.396H25v5.538h3.299c0.312,6.064,5.329,10.906,11.47,10.906h20.462
		c6.141,0,11.158-4.842,11.47-10.906H75v-5.538h-3.269V58h22.897v3.264H100V58V42v-3.264H94.628z"></path>
</g>
<g id="dark">
	<path fill="#009245" d="M100,43H70.231v-4.882H29.769V43H0v14h29.769v31.34c0,5.514,4.486,10,10,10h20.462c5.514,0,10-4.486,10-10
		V57H100V43z"></path>
</g>
<g id="light">
	<path fill="#96D48D" d="M100,45H67.731v-6.882H32.269V45H0v10h32.269v33.34c0,4.136,3.364,7.5,7.5,7.5h20.462
		c4.136,0,7.5-3.364,7.5-7.5V55H100V45z"></path>
</g>
<g id="hlight">
	<path fill="#FFFFFF" d="M100,46.5H65.731v-8.382h-9H43.269h-9V46.5H0v7h34.269v34.84c0,3.032,2.467,5.5,5.5,5.5h20.462
		c3.033,0,5.5-2.468,5.5-5.5V53.5H100V46.5z"></path>
</g>
<g id="shadow">
	<path fill="#006837" d="M34.388,41.971v46.755c0,2.761,2.239,5,5,5h21.224c2.761,0,5-2.239,5-5V61.901
		c-6.468-9.24-21.943-18.093-25.274-19.93H34.388z M62.6,59.721c0,1.099-0.529,1.989-1.182,1.989s-1.182-0.891-1.182-1.989
		c0-1.099,0.529-1.989,1.182-1.989S62.6,58.622,62.6,59.721z M63.14,85.387c0-1.099,0.376-1.989,0.84-1.989s0.84,0.891,0.84,1.989
		s-0.375,1.989-0.839,1.989S63.14,86.486,63.14,85.387z M63.14,79.68c0-1.099,0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989
		s-0.375,1.989-0.839,1.989S63.14,80.779,63.14,79.68z M63.14,73.974c0-1.099,0.376-1.989,0.84-1.989s0.84,0.891,0.84,1.989
		s-0.375,1.989-0.839,1.989S63.14,75.073,63.14,73.974z M63.141,68.268c0-1.099,0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989
		s-0.376,1.989-0.84,1.989S63.141,69.367,63.141,68.268z M63.141,62.561c0-1.099,0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989
		s-0.376,1.989-0.84,1.989S63.141,63.66,63.141,62.561z M60.236,87.89c0-1.098,0.529-1.989,1.182-1.989S62.6,86.792,62.6,87.89
		c0,1.099-0.529,1.989-1.182,1.989S60.236,88.988,60.236,87.89z M60.236,82.256c0-1.099,0.529-1.989,1.182-1.989
		s1.182,0.89,1.182,1.989s-0.529,1.989-1.182,1.989S60.236,83.355,60.236,82.256z M60.236,76.622c0-1.099,0.529-1.989,1.182-1.989
		s1.182,0.89,1.182,1.989s-0.529,1.989-1.182,1.989S60.236,77.721,60.236,76.622z M60.236,70.989c0-1.099,0.529-1.989,1.182-1.989
		s1.182,0.89,1.182,1.988s-0.529,1.989-1.182,1.989S60.236,72.087,60.236,70.989z M60.236,65.355c0-1.099,0.529-1.989,1.182-1.989
		s1.182,0.891,1.182,1.989c0,1.099-0.529,1.989-1.182,1.989S60.236,66.453,60.236,65.355z M56.853,90.454
		c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.89,1.406,1.989s-0.629,1.989-1.406,1.989
		C57.483,92.443,56.853,91.553,56.853,90.454z M56.853,84.845c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989
		c0,1.099-0.629,1.989-1.406,1.989C57.483,86.834,56.853,85.944,56.853,84.845z M56.853,79.237c0-1.099,0.629-1.989,1.406-1.989
		c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989C57.483,81.226,56.853,80.336,56.853,79.237z M56.853,73.628
		c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989
		C57.483,75.617,56.853,74.727,56.853,73.628z M56.853,68.02c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989
		c0,1.099-0.629,1.989-1.406,1.989C57.483,70.009,56.853,69.119,56.853,68.02z M56.853,62.412c0-1.099,0.629-1.989,1.406-1.989
		c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989C57.483,64.401,56.853,63.511,56.853,62.412z M56.853,56.803
		c0-1.098,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989
		C57.483,58.792,56.853,57.901,56.853,56.803z M52.691,87.779c0-1.099,0.739-1.989,1.65-1.989c0.91,0,1.649,0.891,1.649,1.989
		c-0.001,1.099-0.739,1.989-1.65,1.989S52.691,88.878,52.691,87.779z M54.34,84.135c-0.911,0-1.649-0.891-1.649-1.989
		c-0.001-1.099,0.738-1.989,1.649-1.989s1.649,0.891,1.649,1.989C55.989,83.245,55.251,84.135,54.34,84.135z M52.691,76.514
		c0-1.099,0.739-1.989,1.65-1.989c0.91,0,1.649,0.891,1.649,1.989c-0.001,1.099-0.739,1.989-1.65,1.989S52.691,77.613,52.691,76.514
		z M54.34,72.87c-0.911,0-1.649-0.891-1.649-1.989c-0.001-1.099,0.738-1.989,1.649-1.989s1.649,0.891,1.649,1.989
		S55.251,72.87,54.34,72.87z M52.691,65.248c0-1.099,0.739-1.989,1.65-1.989c0.91,0,1.649,0.891,1.649,1.989
		c-0.001,1.099-0.739,1.989-1.65,1.989S52.691,66.347,52.691,65.248z M54.34,61.604c-0.911,0-1.649-0.891-1.649-1.989
		c-0.001-1.099,0.738-1.989,1.649-1.989s1.649,0.891,1.649,1.989C55.989,60.714,55.251,61.604,54.34,61.604z M52.691,53.982
		c0-1.099,0.739-1.989,1.65-1.989c0.91,0,1.649,0.891,1.649,1.989c-0.001,1.099-0.739,1.989-1.65,1.989S52.691,55.081,52.691,53.982
		z M48.676,89.221c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813s-2.036,0.777-2.813,0
		C47.9,91.257,47.9,89.998,48.676,89.221z M48.676,83.511c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813
		s-2.036,0.777-2.813,0C47.9,85.547,47.9,84.288,48.676,83.511z M48.676,77.801c0.777-0.777,2.036-0.777,2.813,0
		s0.777,2.036,0,2.813s-2.036,0.777-2.813,0C47.9,79.837,47.899,78.578,48.676,77.801z M48.676,72.091
		c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813s-2.036,0.777-2.813,0C47.9,74.127,47.9,72.868,48.676,72.091z
		 M48.676,66.381c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813s-2.036,0.777-2.813,0C47.9,68.417,47.9,67.158,48.676,66.381
		z M48.676,60.67c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813s-2.036,0.777-2.813,0C47.9,62.707,47.9,61.447,48.676,60.67z
		 M48.676,54.96c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813s-2.036,0.777-2.813,0C47.9,56.997,47.9,55.737,48.676,54.96z
		 M48.676,49.25c0.777-0.777,2.036-0.777,2.813,0s0.777,2.036,0,2.813s-2.036,0.777-2.813,0C47.9,51.286,47.9,50.027,48.676,49.25z
		 M43.816,87.591c0-1.099,0.738-1.989,1.649-1.989s1.65,0.89,1.65,1.989s-0.739,1.989-1.65,1.989S43.816,88.69,43.816,87.591z
		 M45.465,83.891c-0.911,0-1.649-0.891-1.649-1.989c0-1.099,0.738-1.989,1.649-1.989s1.649,0.891,1.649,1.989
		S46.376,83.891,45.465,83.891z M43.816,76.213c0-1.099,0.738-1.989,1.649-1.989c0.911,0,1.65,0.891,1.65,1.989
		c0,1.099-0.739,1.989-1.65,1.989S43.815,77.312,43.816,76.213z M45.465,72.514c-0.911,0-1.649-0.891-1.649-1.989
		c0-1.099,0.738-1.989,1.649-1.989s1.649,0.891,1.649,1.989S46.376,72.514,45.465,72.514z M43.816,64.836
		c0-1.099,0.738-1.989,1.649-1.989s1.65,0.891,1.65,1.989c0,1.099-0.739,1.989-1.65,1.989S43.815,65.934,43.816,64.836z
		 M43.816,59.147c0-1.099,0.738-1.989,1.649-1.989c0.911,0,1.65,0.891,1.65,1.989c-0.001,1.098-0.739,1.989-1.65,1.989
		S43.815,60.246,43.816,59.147z M45.465,55.448c-0.911,0-1.649-0.891-1.649-1.989s0.738-1.989,1.649-1.989
		c0.91,0,1.649,0.891,1.649,1.989S46.376,55.447,45.465,55.448z M43.816,47.77c0-1.099,0.738-1.989,1.649-1.989
		c0.911,0,1.65,0.891,1.65,1.989c-0.001,1.099-0.739,1.989-1.65,1.989S43.815,48.868,43.816,47.77z M40.139,90.354
		c0-1.098,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989
		C40.768,92.343,40.139,91.452,40.139,90.354z M40.139,84.746c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989
		c0,1.099-0.629,1.989-1.406,1.989C40.768,86.735,40.139,85.845,40.139,84.746z M40.139,79.137c0-1.099,0.629-1.989,1.406-1.989
		c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989C40.768,81.126,40.139,80.236,40.139,79.137z M40.139,73.529
		c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989
		C40.768,75.518,40.139,74.628,40.139,73.529z M40.139,67.92c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.89,1.406,1.989
		s-0.629,1.989-1.406,1.989C40.768,69.909,40.139,69.019,40.139,67.92z M40.139,62.312c0-1.099,0.629-1.989,1.406-1.989
		c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989C40.768,64.301,40.139,63.411,40.139,62.312z M40.139,56.703
		c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989c0,1.099-0.629,1.989-1.406,1.989
		C40.768,58.692,40.138,57.802,40.139,56.703z M40.139,51.095c0-1.099,0.629-1.989,1.406-1.989c0.776,0,1.406,0.891,1.406,1.989
		s-0.629,1.989-1.406,1.989C40.768,53.084,40.138,52.193,40.139,51.095z M40.139,45.486c0-1.099,0.629-1.989,1.406-1.989
		c0.776,0,1.406,0.891,1.406,1.989s-0.629,1.989-1.406,1.989C40.768,47.475,40.138,46.585,40.139,45.486z M37.204,87.096
		c0-1.099,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989c0,1.099-0.529,1.989-1.182,1.989S37.204,88.194,37.204,87.096z
		 M37.204,81.574c0-1.099,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989c0,1.099-0.529,1.989-1.182,1.989
		S37.204,82.672,37.204,81.574z M37.204,76.052c0-1.099,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989
		c0,1.099-0.529,1.989-1.182,1.989S37.204,77.151,37.204,76.052z M37.204,70.53c0-1.099,0.529-1.989,1.182-1.989
		s1.182,0.891,1.182,1.989c0,1.099-0.529,1.989-1.182,1.989S37.204,71.629,37.204,70.53z M37.204,65.008
		c0-1.099,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989s-0.529,1.989-1.182,1.989S37.204,66.107,37.204,65.008z M37.204,59.486
		c0-1.099,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989c0,1.099-0.529,1.989-1.182,1.989S37.204,60.585,37.204,59.486z
		 M37.204,53.964c0-1.098,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989c0,1.099-0.529,1.989-1.182,1.989
		S37.204,55.063,37.204,53.964z M37.204,48.442c0-1.099,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989
		c0,1.099-0.529,1.989-1.182,1.989S37.204,49.541,37.204,48.442z M34.984,85.232c-0.001-1.099,0.375-1.989,0.839-1.989
		c0.464,0,0.84,0.891,0.84,1.989c0,1.099-0.376,1.989-0.84,1.989C35.359,87.221,34.984,86.331,34.984,85.232z M34.984,79.575
		c-0.001-1.099,0.375-1.989,0.839-1.989c0.464,0,0.84,0.891,0.84,1.989s-0.376,1.989-0.84,1.989
		C35.359,81.564,34.984,80.674,34.984,79.575z M34.984,73.918c0-1.099,0.375-1.989,0.839-1.989c0.464,0,0.84,0.891,0.84,1.989
		s-0.376,1.989-0.84,1.989C35.359,75.907,34.984,75.017,34.984,73.918z M34.984,68.26c0-1.098,0.375-1.989,0.839-1.989
		c0.464,0,0.84,0.89,0.84,1.989s-0.376,1.989-0.84,1.989C35.359,70.249,34.984,69.358,34.984,68.26z M34.984,62.603
		c0-1.098,0.375-1.989,0.839-1.989c0.464,0,0.84,0.891,0.84,1.989s-0.376,1.989-0.84,1.989
		C35.359,64.592,34.984,63.701,34.984,62.603z M34.984,56.945c0-1.099,0.375-1.989,0.839-1.989c0.464,0,0.84,0.891,0.84,1.989
		s-0.376,1.989-0.84,1.989C35.359,58.934,34.984,58.044,34.984,56.945z M34.983,51.288c0-1.099,0.376-1.989,0.84-1.989
		c0.464,0,0.84,0.891,0.84,1.989c0,1.099-0.376,1.989-0.84,1.989C35.359,53.277,34.983,52.387,34.983,51.288z M34.983,45.631
		c0-1.099,0.376-1.989,0.84-1.989c0.464,0,0.84,0.891,0.84,1.989c0,1.099-0.376,1.989-0.84,1.989
		C35.359,47.62,34.984,46.729,34.983,45.631z"></path>
</g>
<g id="frame">
	<rect fill="none" width="100" height="100"></rect>
</g>
    </g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>