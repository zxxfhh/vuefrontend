<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
    <g id="shape">
	<path fill="#006837" d="M94.628,38.736V42H71.731v-2.335h4.519V29.637h-2.042v-1.576h-4.387v1.576h-2.113v-1.576h-4.387v1.576
		h-5.613v-1.576h-4.387v1.576H46.5v-1.576h-4.387v1.576H36.5v-1.576h-4.387v1.576H30v-1.576h-4.387v1.576H23.75v10.028h4.519V42
		H5.372v-3.264H0V42v16v3.264h5.372V58h22.897v25.396H25v5.538h3.299c0.312,6.064,5.329,10.906,11.47,10.906h20.462
		c6.141,0,11.158-4.842,11.47-10.906H75v-5.538h-3.269V58h22.897v3.264H100V58V42v-3.264H94.628z"></path>
</g>
<g id="dark">
	<path fill="#009245" d="M100,43H70.231v-4.882H29.769V43H0v14h29.769v31.34c0,5.514,4.486,10,10,10h20.462c5.514,0,10-4.486,10-10
		V57H100V43z"></path>
</g>
<g id="light">
	<path fill="#96D48D" d="M100,45H67.731v-6.882H32.269V45H0v10h32.269v33.34c0,4.136,3.364,7.5,7.5,7.5h20.462
		c4.136,0,7.5-3.364,7.5-7.5V55H100V45z"></path>
</g>
<g id="hlight">
	<path fill="#FFFFFF" d="M100,46.5H65.731v-8.382h-9H43.269h-9V46.5H0v7h34.269v34.84c0,3.032,2.467,5.5,5.5,5.5h20.462
		c3.033,0,5.5-2.468,5.5-5.5V53.5H100V46.5z"></path>
</g>
<g id="shadow">
	<path fill="#006837" d="M59.662,41.971c-3.331,1.837-18.806,10.69-25.274,19.93v26.825c0,2.761,2.239,5,5,5h21.224
		c2.761,0,5-2.239,5-5V41.971H59.662z M38.582,57.732c0.653,0,1.182,0.89,1.182,1.989c0,1.098-0.529,1.989-1.182,1.989
		S37.4,60.82,37.4,59.721C37.4,58.622,37.929,57.732,38.582,57.732z M36.019,87.376c-0.464,0-0.839-0.891-0.839-1.989
		s0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989S36.483,87.376,36.019,87.376z M36.019,81.669c-0.464,0-0.839-0.89-0.839-1.989
		s0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989S36.483,81.669,36.019,81.669z M36.019,75.963c-0.464,0-0.839-0.891-0.839-1.989
		s0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989S36.483,75.963,36.019,75.963z M36.019,70.257c-0.464,0-0.84-0.89-0.84-1.989
		s0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989S36.483,70.257,36.019,70.257z M36.019,64.55c-0.464,0-0.84-0.89-0.84-1.989
		s0.376-1.989,0.84-1.989s0.84,0.89,0.84,1.989S36.483,64.55,36.019,64.55z M38.582,89.879c-0.653,0-1.182-0.89-1.182-1.989
		c0-1.098,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989S39.235,89.879,38.582,89.879z M38.582,84.245
		c-0.653,0-1.182-0.89-1.182-1.989s0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989S39.235,84.245,38.582,84.245z M38.582,78.611
		c-0.653,0-1.182-0.89-1.182-1.989s0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989S39.235,78.611,38.582,78.611z M38.582,72.977
		c-0.653,0-1.182-0.891-1.182-1.989S37.929,69,38.582,69s1.182,0.89,1.182,1.989C39.764,72.087,39.235,72.977,38.582,72.977z
		 M38.582,67.344c-0.653,0-1.182-0.89-1.182-1.989c0-1.098,0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989
		C39.764,66.453,39.235,67.344,38.582,67.344z M41.741,92.443c-0.777,0-1.406-0.89-1.406-1.989s0.63-1.989,1.406-1.989
		c0.777,0,1.406,0.89,1.406,1.989S42.517,92.443,41.741,92.443z M41.741,86.834c-0.777,0-1.406-0.89-1.406-1.989
		c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989S42.517,86.834,41.741,86.834z M41.741,81.226
		c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989S42.517,81.226,41.741,81.226z
		 M41.741,75.617c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989
		S42.517,75.617,41.741,75.617z M41.741,70.009c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989
		c0.777,0,1.406,0.89,1.406,1.989S42.517,70.009,41.741,70.009z M41.741,64.401c-0.777,0-1.406-0.89-1.406-1.989
		c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989S42.517,64.401,41.741,64.401z M41.741,58.792
		c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.891,1.406,1.989S42.517,58.792,41.741,58.792z
		 M45.66,89.768c-0.911,0-1.649-0.89-1.65-1.989c0-1.098,0.739-1.989,1.649-1.989c0.911,0,1.65,0.89,1.65,1.989
		S46.571,89.768,45.66,89.768z M44.011,82.146c0-1.098,0.738-1.989,1.649-1.989s1.65,0.89,1.649,1.989
		c0,1.098-0.738,1.989-1.649,1.989S44.011,83.245,44.011,82.146z M45.66,78.503c-0.911,0-1.649-0.89-1.65-1.989
		c0-1.098,0.739-1.989,1.649-1.989c0.911,0,1.65,0.89,1.65,1.989S46.571,78.503,45.66,78.503z M44.011,70.881
		c0-1.098,0.738-1.989,1.649-1.989s1.65,0.89,1.649,1.989c0,1.098-0.738,1.989-1.649,1.989
		C44.749,72.87,44.011,71.979,44.011,70.881z M45.66,67.237c-0.911,0-1.649-0.89-1.65-1.989c0-1.098,0.739-1.989,1.649-1.989
		c0.911,0,1.65,0.89,1.65,1.989S46.571,67.237,45.66,67.237z M44.011,59.615c0-1.098,0.738-1.989,1.649-1.989s1.65,0.89,1.649,1.989
		c0,1.098-0.738,1.989-1.649,1.989S44.011,60.714,44.011,59.615z M45.66,55.971c-0.911,0-1.649-0.89-1.65-1.989
		c0-1.098,0.739-1.989,1.649-1.989c0.911,0,1.65,0.89,1.65,1.989S46.571,55.971,45.66,55.971z M51.324,92.034
		c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813s2.036-0.777,2.813,0C52.1,89.998,52.1,91.257,51.324,92.034z
		 M51.324,86.324c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813s2.036-0.777,2.813,0
		C52.1,84.288,52.1,85.547,51.324,86.324z M51.324,80.614c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813
		s2.036-0.777,2.813,0S52.1,79.837,51.324,80.614z M51.324,74.904c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813
		s2.036-0.777,2.813,0C52.1,72.868,52.1,74.127,51.324,74.904z M51.324,69.194c-0.777,0.777-2.036,0.777-2.813,0
		s-0.777-2.036,0-2.813s2.036-0.777,2.813,0C52.1,67.158,52.1,68.417,51.324,69.194z M51.324,63.483
		c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813s2.036-0.777,2.813,0C52.1,61.447,52.1,62.707,51.324,63.483z
		 M51.324,57.773c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813s2.036-0.777,2.813,0
		C52.1,55.737,52.1,56.997,51.324,57.773z M51.324,52.063c-0.777,0.777-2.036,0.777-2.813,0s-0.777-2.036,0-2.813
		s2.036-0.777,2.813,0C52.1,50.027,52.1,51.286,51.324,52.063z M54.535,89.58c-0.911,0-1.65-0.89-1.65-1.989s0.739-1.989,1.65-1.989
		s1.649,0.89,1.649,1.989S55.446,89.58,54.535,89.58z M52.886,81.902c0-1.098,0.738-1.989,1.649-1.989s1.649,0.89,1.649,1.989
		c0,1.098-0.738,1.989-1.649,1.989S52.886,83,52.886,81.902z M54.535,78.202c-0.911,0-1.65-0.89-1.65-1.989
		c0-1.098,0.739-1.989,1.65-1.989c0.911,0,1.649,0.89,1.649,1.989C56.185,77.312,55.446,78.202,54.535,78.202z M52.886,70.525
		c0-1.098,0.738-1.989,1.649-1.989s1.649,0.89,1.649,1.989c0,1.098-0.738,1.989-1.649,1.989S52.886,71.623,52.886,70.525z
		 M54.535,66.825c-0.911,0-1.65-0.89-1.65-1.989c0-1.098,0.739-1.989,1.65-1.989s1.649,0.89,1.649,1.989
		C56.185,65.934,55.446,66.825,54.535,66.825z M54.535,61.136c-0.911,0-1.649-0.891-1.65-1.989c0-1.098,0.739-1.989,1.65-1.989
		c0.911,0,1.649,0.89,1.649,1.989C56.185,60.246,55.446,61.136,54.535,61.136z M52.886,53.459c0-1.098,0.739-1.989,1.649-1.989
		c0.911,0,1.649,0.891,1.649,1.989s-0.738,1.989-1.649,1.989C53.624,55.447,52.886,54.557,52.886,53.459z M54.535,49.759
		c-0.911,0-1.649-0.89-1.65-1.989c0-1.098,0.739-1.989,1.65-1.989c0.911,0,1.649,0.89,1.649,1.989
		C56.185,48.868,55.446,49.759,54.535,49.759z M58.455,92.343c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989
		c0.777,0,1.406,0.891,1.406,1.989S59.232,92.343,58.455,92.343z M58.455,86.735c-0.777,0-1.406-0.89-1.406-1.989
		c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989S59.232,86.735,58.455,86.735z M58.455,81.126
		c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989S59.232,81.126,58.455,81.126z
		 M58.455,75.518c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989
		S59.232,75.518,58.455,75.518z M58.455,69.909c-0.777,0-1.406-0.89-1.406-1.989s0.63-1.989,1.406-1.989
		c0.777,0,1.406,0.89,1.406,1.989S59.232,69.909,58.455,69.909z M58.455,64.301c-0.777,0-1.406-0.89-1.406-1.989
		c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989S59.232,64.301,58.455,64.301z M58.455,58.692
		c-0.777,0-1.406-0.89-1.406-1.989c0-1.098,0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989
		C59.862,57.802,59.232,58.692,58.455,58.692z M58.455,53.084c-0.777,0-1.406-0.891-1.406-1.989s0.63-1.989,1.406-1.989
		c0.777,0,1.406,0.89,1.406,1.989C59.862,52.193,59.232,53.084,58.455,53.084z M58.455,47.475c-0.777,0-1.406-0.891-1.406-1.989
		s0.63-1.989,1.406-1.989c0.777,0,1.406,0.89,1.406,1.989C59.862,46.585,59.232,47.475,58.455,47.475z M61.614,89.085
		c-0.653,0-1.182-0.89-1.182-1.989c0-1.098,0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989
		C62.796,88.194,62.267,89.085,61.614,89.085z M61.614,83.563c-0.653,0-1.182-0.89-1.182-1.989c0-1.098,0.529-1.989,1.182-1.989
		s1.182,0.89,1.182,1.989C62.796,82.672,62.267,83.563,61.614,83.563z M61.614,78.041c-0.653,0-1.182-0.89-1.182-1.989
		c0-1.098,0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989S62.267,78.041,61.614,78.041z M61.614,72.519
		c-0.653,0-1.182-0.89-1.182-1.989c0-1.098,0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989S62.267,72.519,61.614,72.519z
		 M61.614,66.997c-0.653,0-1.182-0.891-1.182-1.989s0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989
		C62.796,66.107,62.267,66.997,61.614,66.997z M61.614,61.475c-0.653,0-1.182-0.89-1.182-1.989c0-1.098,0.529-1.989,1.182-1.989
		s1.182,0.89,1.182,1.989C62.796,60.585,62.267,61.475,61.614,61.475z M61.614,55.953c-0.653,0-1.182-0.89-1.182-1.989
		c0-1.098,0.529-1.989,1.182-1.989s1.182,0.891,1.182,1.989C62.796,55.063,62.267,55.953,61.614,55.953z M61.614,50.431
		c-0.653,0-1.182-0.89-1.182-1.989c0-1.098,0.529-1.989,1.182-1.989s1.182,0.89,1.182,1.989S62.267,50.431,61.614,50.431z
		 M64.177,87.221c-0.464,0-0.84-0.89-0.84-1.989c0-1.098,0.376-1.989,0.84-1.989c0.464,0,0.84,0.89,0.839,1.989
		C65.016,86.331,64.641,87.221,64.177,87.221z M64.177,81.564c-0.464,0-0.84-0.891-0.84-1.989s0.376-1.989,0.84-1.989
		c0.464,0,0.84,0.89,0.839,1.989C65.016,80.674,64.641,81.564,64.177,81.564z M64.177,75.907c-0.464,0-0.84-0.891-0.84-1.989
		s0.376-1.989,0.84-1.989c0.464,0,0.839,0.89,0.839,1.989S64.641,75.907,64.177,75.907z M64.177,70.249
		c-0.464,0-0.84-0.89-0.84-1.989s0.376-1.989,0.84-1.989c0.464,0,0.839,0.891,0.839,1.989S64.641,70.249,64.177,70.249z
		 M64.177,64.592c-0.464,0-0.84-0.891-0.84-1.989s0.376-1.989,0.84-1.989c0.464,0,0.839,0.891,0.839,1.989
		C65.016,63.701,64.641,64.592,64.177,64.592z M64.177,58.934c-0.464,0-0.84-0.891-0.84-1.989s0.376-1.989,0.84-1.989
		c0.464,0,0.839,0.89,0.839,1.989S64.641,58.934,64.177,58.934z M64.177,53.277c-0.464,0-0.84-0.89-0.84-1.989
		c0-1.098,0.376-1.989,0.84-1.989c0.464,0,0.84,0.89,0.84,1.989S64.641,53.277,64.177,53.277z M64.177,47.62
		c-0.464,0-0.84-0.89-0.84-1.989c0-1.098,0.376-1.989,0.84-1.989c0.464,0,0.84,0.89,0.84,1.989
		C65.016,46.729,64.641,47.62,64.177,47.62z"></path>
</g>
<g id="frame">
	<rect fill="none" width="100" height="100"></rect>
</g>
    </g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>