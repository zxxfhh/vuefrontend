<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" xml:space="preserve"><desc>Copyright Opto 22</desc> 
<g>
    <g id="shape">
	<polyline fill="#006837" points="19.622,60.278 59.141,99.797 83.217,75.721 67.774,60.278 	"></polyline>
	<path fill="#006837" d="M100,64.262H89.628V35.738H100"></path>
	<path fill="#006837" d="M10.372,64.262H0V35.738h10.372"></path>
	
		<rect x="57.555" y="84.6" transform="matrix(0.7071 -0.7071 0.7071 0.7071 -41.1963 75.7599)" fill="#006837" width="26.594" height="6.017"></rect>
	
		<rect x="70.619" y="87.997" transform="matrix(0.7071 -0.7071 0.7071 0.7071 -42.6039 79.1563)" fill="#006837" width="7.258" height="6.017"></rect>
	<polygon fill="#006837" points="51.063,39.5 49.675,40.888 49.609,40.917 48.192,39.5 0,39.5 0,60.5 100,60.5 100,39.5 	"></polygon>
</g>
<g id="dark">
	<polygon fill="#009245" points="63.439,58.649 60.699,58.649 76.737,74.687 57.932,93.492 23.09,58.649 20.895,58.649 
		59.172,96.926 60.269,95.828 59.324,94.884 78.129,76.079 79.074,77.024 80.444,75.653 	"></polygon>
	<polygon fill="#009245" points="51.45,41 49.675,42.775 49.609,42.804 47.804,41 0,41 0,59 100,59 100,41 	"></polygon>
</g>
<g id="light">
	<polygon fill="#96D48D" points="100,43.5 51.458,43.5 49.695,45.263 49.601,45.304 47.797,43.5 0,43.5 0,56.5 21.038,56.5 
		20.989,56.549 57.932,93.492 76.737,74.687 58.55,56.5 100,56.5 	"></polygon>
</g>
<g id="hlight">
	<polygon fill="#FFFFFF" points="53.55,54.5 100,54.5 100,45.5 51.706,45.5 49.69,47.516 49.603,47.554 47.549,45.5 0,45.5 0,54.5 
		21.632,54.5 59.278,92.146 75.237,76.187 	"></polygon>
</g>
<g id="shadow">
	<path fill="#006837" d="M45.568,43.518L26.763,62.322l31.169,31.169l18.805-18.805L45.568,43.518z M69.138,71.904
		c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.517,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486S68.745,72.297,69.138,71.904z
		 M65.812,68.578c0.393-0.393,1.248-0.176,1.91,0.486c0.661,0.661,0.879,1.516,0.486,1.91s-1.248,0.176-1.91-0.486
		C65.637,69.826,65.419,68.971,65.812,68.578z M62.745,62.424c0.279-0.279,1.042,0.031,1.703,0.692
		c0.661,0.661,0.971,1.424,0.692,1.703s-1.042-0.031-1.703-0.692C62.776,63.466,62.466,62.703,62.745,62.424z M62.487,65.253
		c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.516,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486
		C62.311,66.501,62.094,65.646,62.487,65.253z M62.443,69.013c0.468-0.468,1.383-0.311,2.045,0.351
		c0.662,0.662,0.819,1.577,0.351,2.045c-0.468,0.468-1.383,0.311-2.045-0.351S61.975,69.481,62.443,69.013z M64.143,75.435
		c-0.549,0.549-1.53,0.457-2.191-0.204c-0.662-0.661-0.753-1.643-0.204-2.191s1.53-0.457,2.191,0.204
		C64.6,73.905,64.691,74.886,64.143,75.435z M59.338,59.017c0.279-0.279,1.042,0.031,1.703,0.692s0.971,1.424,0.692,1.703
		s-1.042-0.031-1.703-0.692S59.059,59.296,59.338,59.017z M59.161,61.927c0.393-0.393,1.248-0.176,1.91,0.486
		s0.879,1.517,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486C58.986,63.175,58.768,62.32,59.161,61.927z M59.065,65.636
		c0.468-0.468,1.383-0.311,2.045,0.351s0.819,1.577,0.351,2.045c-0.468,0.468-1.383,0.311-2.045-0.351
		C58.754,67.019,58.597,66.103,59.065,65.636z M44.785,63.333c-0.935,0-1.694-0.758-1.694-1.694s0.758-1.694,1.694-1.694
		s1.694,0.758,1.694,1.694S45.721,63.333,44.785,63.333z M45.376,67.357c-0.549,0.549-1.53,0.457-2.191-0.204
		s-0.753-1.643-0.204-2.191s1.53-0.457,2.191,0.204C45.833,65.828,45.924,66.809,45.376,67.357z M51.663,66.823
		c0.935,0,1.694,0.758,1.694,1.694c0,0.935-0.758,1.694-1.694,1.694s-1.694-0.758-1.694-1.694
		C49.969,67.582,50.727,66.823,51.663,66.823z M51.469,62.761c0.549-0.549,1.53-0.457,2.191,0.204
		c0.661,0.661,0.753,1.643,0.204,2.191s-1.53,0.457-2.191-0.204C51.012,64.291,50.92,63.31,51.469,62.761z M50.439,61.731
		c-0.549,0.549-1.53,0.457-2.191-0.204s-0.753-1.643-0.204-2.191s1.53-0.457,2.191,0.204C50.896,60.201,50.987,61.182,50.439,61.731
		z M48.224,63.385c0.935,0,1.694,0.758,1.694,1.694c0,0.935-0.758,1.694-1.694,1.694s-1.694-0.758-1.694-1.694
		S47.289,63.385,48.224,63.385z M47.013,58.305c-0.549,0.549-1.53,0.457-2.191-0.204c-0.661-0.661-0.753-1.643-0.204-2.191
		c0.549-0.549,1.53-0.457,2.191,0.204C47.47,56.775,47.561,57.756,47.013,58.305z M46.372,68.354
		c0.549-0.549,1.53-0.457,2.191,0.204s0.753,1.643,0.204,2.191c-0.549,0.549-1.53,0.457-2.191-0.204
		C45.915,69.884,45.824,68.903,46.372,68.354z M49.059,75.762c0.468-0.468,1.383-0.311,2.045,0.351
		c0.661,0.661,0.819,1.577,0.351,2.045c-0.468,0.468-1.383,0.311-2.045-0.351C48.748,77.145,48.591,76.23,49.059,75.762z
		 M49.969,73.938c-0.661-0.661-0.753-1.643-0.204-2.191s1.53-0.457,2.191,0.204c0.662,0.661,0.753,1.643,0.204,2.191
		S50.631,74.599,49.969,73.938z M52.437,79.14c0.468-0.468,1.383-0.311,2.045,0.351c0.661,0.661,0.819,1.577,0.351,2.045
		s-1.383,0.311-2.045-0.351S51.969,79.607,52.437,79.14z M53.361,77.33c-0.661-0.661-0.753-1.643-0.204-2.191
		s1.53-0.457,2.191,0.204s0.753,1.643,0.204,2.191C55.004,78.083,54.023,77.991,53.361,77.33z M55.102,73.65
		c-0.936,0-1.694-0.758-1.694-1.694s0.758-1.694,1.694-1.694c0.935,0,1.694,0.758,1.694,1.694S56.037,73.65,55.102,73.65z
		 M54.895,66.187c0.549-0.549,1.53-0.457,2.191,0.204s0.753,1.643,0.204,2.191s-1.53,0.457-2.191-0.204
		C54.438,67.717,54.346,66.736,54.895,66.187z M56.549,78.531c0.549-0.549,1.53-0.457,2.191,0.204
		c0.662,0.661,0.753,1.643,0.204,2.191s-1.53,0.457-2.191-0.204S56.001,79.08,56.549,78.531z M58.541,77.089
		c-0.936,0-1.694-0.758-1.694-1.694c0-0.935,0.758-1.694,1.694-1.694c0.935,0,1.694,0.758,1.694,1.694
		C60.235,76.331,59.476,77.089,58.541,77.089z M58.525,71.804c-0.661-0.662-0.753-1.643-0.204-2.191
		c0.549-0.549,1.53-0.457,2.191,0.204s0.753,1.643,0.204,2.191S59.187,72.466,58.525,71.804z M55.931,55.61
		c0.279-0.279,1.042,0.031,1.703,0.692s0.971,1.424,0.692,1.703s-1.042-0.031-1.703-0.692S55.652,55.889,55.931,55.61z
		 M55.836,58.602c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.517,0.486,1.91s-1.248,0.176-1.91-0.486
		C55.66,59.85,55.443,58.995,55.836,58.602z M55.687,62.258c0.468-0.468,1.383-0.311,2.045,0.351s0.819,1.577,0.351,2.045
		c-0.468,0.468-1.383,0.311-2.045-0.351C55.377,63.641,55.22,62.726,55.687,62.258z M52.524,52.202
		c0.279-0.279,1.042,0.031,1.703,0.692s0.971,1.424,0.692,1.703s-1.042-0.031-1.703-0.692S52.244,52.482,52.524,52.202z
		 M52.51,55.276c0.393-0.393,1.248-0.176,1.91,0.486c0.661,0.661,0.879,1.516,0.486,1.91s-1.248,0.176-1.91-0.486
		C52.335,56.524,52.117,55.669,52.51,55.276z M52.31,58.88c0.468-0.468,1.383-0.311,2.045,0.351s0.819,1.577,0.351,2.045
		s-1.383,0.311-2.045-0.351C51.999,60.263,51.842,59.348,52.31,58.88z M49.116,48.795c0.279-0.279,1.042,0.031,1.703,0.692
		s0.971,1.424,0.692,1.703s-1.042-0.031-1.703-0.692C49.147,49.837,48.837,49.075,49.116,48.795z M49.185,51.95
		c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.516,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486
		C49.009,53.199,48.792,52.344,49.185,51.95z M48.932,55.503c0.468-0.468,1.383-0.311,2.045,0.351
		c0.662,0.662,0.819,1.577,0.351,2.045c-0.468,0.468-1.383,0.311-2.045-0.351C48.621,56.886,48.464,55.97,48.932,55.503z
		 M48.255,51.02c-0.393,0.393-1.248,0.176-1.91-0.486c-0.661-0.661-0.879-1.516-0.486-1.91s1.248-0.176,1.91,0.486
		S48.648,50.627,48.255,51.02z M45.709,45.388c0.279-0.279,1.042,0.031,1.703,0.692c0.662,0.661,0.971,1.424,0.692,1.703
		s-1.042-0.031-1.703-0.692C45.74,46.43,45.43,45.667,45.709,45.388z M45.554,52.125c0.468-0.468,1.383-0.311,2.045,0.351
		c0.662,0.662,0.819,1.577,0.351,2.045c-0.468,0.468-1.383,0.311-2.045-0.351C45.244,53.508,45.087,52.593,45.554,52.125z
		 M42.177,48.747c0.468-0.468,1.383-0.311,2.045,0.351c0.662,0.662,0.819,1.577,0.351,2.045s-1.383,0.311-2.045-0.351
		C41.866,50.13,41.709,49.215,42.177,48.747z M41.191,52.483c0.549-0.549,1.53-0.457,2.191,0.204
		c0.661,0.662,0.753,1.643,0.204,2.191c-0.549,0.549-1.53,0.457-2.191-0.204C40.734,54.013,40.642,53.032,41.191,52.483z
		 M41.346,56.507c0.936,0,1.694,0.758,1.694,1.694c0,0.935-0.758,1.694-1.694,1.694c-0.935,0-1.694-0.758-1.694-1.694
		S40.411,56.507,41.346,56.507z M41.983,63.965c-0.549,0.549-1.53,0.457-2.191-0.204c-0.661-0.661-0.753-1.643-0.204-2.191
		s1.53-0.457,2.191,0.204S42.532,63.416,41.983,63.965z M37.907,53.068c0.936,0,1.694,0.758,1.694,1.694
		c0,0.935-0.758,1.694-1.694,1.694c-0.935,0-1.694-0.758-1.694-1.694S36.972,53.068,37.907,53.068z M36.195,58.177
		c0.549-0.549,1.53-0.457,2.191,0.204c0.662,0.661,0.753,1.643,0.204,2.191s-1.53,0.457-2.191-0.204S35.647,58.726,36.195,58.177z
		 M31.033,64.628c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703c0.279-0.279,1.042,0.031,1.703,0.692
		S31.313,64.349,31.033,64.628z M34.47,68.065c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S34.749,67.786,34.47,68.065z M34.39,64.898c-0.393,0.393-1.248,0.176-1.91-0.486s-0.879-1.517-0.486-1.91
		c0.393-0.393,1.248-0.176,1.91,0.486S34.783,64.505,34.39,64.898z M34.566,61.269c-0.468,0.468-1.383,0.311-2.045-0.351
		c-0.661-0.662-0.819-1.577-0.351-2.045s1.383-0.311,2.045,0.351S35.034,60.801,34.566,61.269z M37.907,71.501
		c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703s1.042,0.031,1.703,0.692S38.186,71.222,37.907,71.501z
		 M35.388,65.896c0.393-0.393,1.248-0.176,1.91,0.486c0.661,0.661,0.879,1.516,0.486,1.91s-1.248,0.176-1.91-0.486
		C35.212,67.144,34.995,66.289,35.388,65.896z M37.944,64.647c-0.468,0.468-1.383,0.311-2.045-0.351
		c-0.662-0.661-0.819-1.577-0.351-2.045s1.383-0.311,2.045,0.351S38.411,64.179,37.944,64.647z M38.781,69.288
		c0.393-0.393,1.248-0.176,1.91,0.486c0.662,0.661,0.879,1.516,0.486,1.91s-1.248,0.176-1.91-0.486
		C38.605,70.537,38.387,69.682,38.781,69.288z M41.343,74.938c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S41.623,74.659,41.343,74.938z M41.321,68.024c-0.468,0.468-1.383,0.311-2.045-0.351
		c-0.662-0.661-0.819-1.577-0.351-2.045c0.468-0.468,1.383-0.311,2.045,0.351S41.789,67.557,41.321,68.024z M42.174,72.681
		c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.517,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486
		C41.998,73.93,41.78,73.075,42.174,72.681z M44.78,78.375c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S45.059,78.095,44.78,78.375z M44.699,71.402c-0.468,0.468-1.383,0.311-2.045-0.351
		c-0.662-0.661-0.819-1.577-0.351-2.045s1.383-0.311,2.045,0.351S45.167,70.934,44.699,71.402z M45.566,76.074
		c0.393-0.393,1.248-0.176,1.91,0.486c0.661,0.662,0.879,1.517,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486
		C45.391,77.323,45.173,76.468,45.566,76.074z M48.217,81.811c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S48.496,81.532,48.217,81.811z M48.077,74.78c-0.468,0.468-1.383,0.311-2.045-0.351
		c-0.661-0.661-0.819-1.577-0.351-2.045s1.383-0.311,2.045,0.351S48.544,74.312,48.077,74.78z M48.959,79.467
		c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.517,0.486,1.91c-0.393,0.393-1.248,0.176-1.91-0.486S48.566,79.86,48.959,79.467z
		 M51.653,85.248c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703s1.042,0.031,1.703,0.692
		S51.932,84.969,51.653,85.248z M52.352,82.86c0.393-0.393,1.248-0.176,1.91,0.486s0.879,1.516,0.486,1.91s-1.248,0.176-1.91-0.486
		S51.959,83.253,52.352,82.86z M55.09,88.685c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S55.369,88.405,55.09,88.685z M55.814,82.517c0.468-0.468,1.383-0.311,2.045,0.351
		c0.661,0.661,0.819,1.577,0.351,2.045s-1.383,0.311-2.045-0.351C55.503,83.901,55.346,82.985,55.814,82.517z M55.745,86.253
		c0.393-0.393,1.248-0.176,1.91,0.486c0.661,0.661,0.879,1.516,0.486,1.91s-1.248,0.176-1.91-0.486
		C55.57,87.501,55.352,86.646,55.745,86.253z M58.527,92.121c-0.279,0.279-1.042-0.031-1.703-0.692s-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S58.806,91.842,58.527,92.121z M61.587,88.291c-0.468,0.468-1.383,0.311-2.045-0.351
		s-0.819-1.577-0.351-2.045c0.468-0.468,1.383-0.311,2.045,0.351C61.898,86.907,62.055,87.823,61.587,88.291z M62.337,84.319
		c-0.549,0.549-1.53,0.457-2.191-0.204s-0.753-1.643-0.204-2.191s1.53-0.457,2.191,0.204S62.886,83.77,62.337,84.319z M61.98,80.528
		c-0.936,0-1.694-0.758-1.694-1.694c0-0.935,0.758-1.694,1.694-1.694c0.935,0,1.694,0.758,1.694,1.694S62.915,80.528,61.98,80.528z
		 M65.419,83.967c-0.936,0-1.694-0.758-1.694-1.694c0-0.935,0.758-1.694,1.694-1.694s1.694,0.758,1.694,1.694
		C67.113,83.208,66.354,83.967,65.419,83.967z M67.569,78.86c-0.549,0.549-1.53,0.457-2.191-0.204s-0.753-1.643-0.204-2.191
		c0.549-0.549,1.53-0.457,2.191,0.204S68.117,78.312,67.569,78.86z M68.216,74.786c-0.468,0.468-1.383,0.311-2.045-0.351
		c-0.662-0.661-0.819-1.577-0.351-2.045c0.468-0.468,1.383-0.311,2.045,0.351S68.684,74.319,68.216,74.786z M68.548,68.227
		c-0.279,0.279-1.042-0.031-1.703-0.692c-0.661-0.662-0.971-1.424-0.692-1.703s1.042,0.031,1.703,0.692S68.827,67.947,68.548,68.227
		z M71.594,78.164c-0.468,0.468-1.383,0.311-2.045-0.351c-0.662-0.661-0.819-1.577-0.351-2.045c0.468-0.468,1.383-0.311,2.045,0.351
		S72.061,77.696,71.594,78.164z M71.955,71.634c-0.279,0.279-1.042-0.031-1.703-0.692c-0.661-0.662-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692S72.234,71.355,71.955,71.634z M73.659,74.349c-0.661-0.662-0.971-1.424-0.692-1.703
		s1.042,0.031,1.703,0.692s0.971,1.424,0.692,1.703S74.32,75.01,73.659,74.349z"></path>
</g>
<g id="frame">
	<rect fill="none" width="100" height="100"></rect>
</g>
    </g>

  <script type="text/javascript">
    <![CDATA[
    /*
    #####################################
    #           How to Use              #
    #####################################

    Variables with the following prefix:

    _pb_ = bool   parameter ( true or false )
    _pn_ = number parameter ( Int, Float, Real etc )
    _ps_ = string parameter ( string can be entered directly )
    _pc_ = color parameter in hex color code ( #00ff00ff )

    Indicate variable type to be used in Fuxa Properties and binding of Tags, Important! they have to be place within:

    //!export-start
    let _pn_setState = 0;
    //!export-end

  

    There are 2x Functions to handle sending and receiving data between Fuxa and the SVG

    // Recieve Variables From Fuxa
    function putValue(id, value) { } 
    
    // Send Variables To Fuxa
    function postValue(id, value) {
      console.error('Not defined!');
    }

    The ID is the name of the variable _pn_setState for example and value is the value to be sent or received from Fuxa


    This SVG uses an INT/Number Variable to change the State and State of the SVG:

    0 = Off
    1 = Run
    2 = Warning
    3 = Fault
    4 = Invalid
    5 = Spare

    You can also use the bool field and this will change the state between 0 = off and 1 = run 

    You can also set the color for each state in Fuxa using HEX color code #b4b4b4
    The Default Blink Interval is 500ms but can also be changed in Fuxa in MS resolution


    This SVG is a bit complex as we have different shades of color, we calculate the offset colors
    The Shade Values are from -100 to 100, where 0 is not changed and -100 is black and 100 is white

    These style of SVGs can be found here:

    https://www.opto22.com/support/resources-tools/demos/svg-image-library

    By Adding this script to there downloaded SVG it should work without any modification ( may have to check group element names )
    Make sure the script is within the SVG tags

    <svg>
      SVG Content Here
      <script>
        JS Script Content Here
      </script>
    </svg>

    */

	  // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
	  let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#b4b4b4';
    let _pc_state1Colour     = '#006837';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    //!export-end
	  let stateNumber = 1;
    let blinkInterval;

    // Function to update the color based on the set state
    function logic() {

      switch (stateNumber) {
        case 0: // off
          setBaseColor( _pc_state0Colour);
		      clearBlinking();
          break; 
        case 1: // run
          setBaseColor( _pc_state1Colour);
		      clearBlinking();
          break;
        case 2: // warning
          setBaseColor( _pc_state2Colour);
		      clearBlinking();
          break;
        case 3: // fault
		      startBlinking( _pc_state0Colour, _pc_state3Colour, _pn_setInterval );
          break;
        case 4: // invalid 
          setBaseColor( _pc_state4Colour);
		      clearBlinking();
          break;
        case 5: // spare
          setBaseColor( _pc_state5Colour);
		      clearBlinking();
          break;
        default:
          console.log('Undefined State');
		      clearBlinking();
      }
    }

    // Initial setup
    function init() {
      logic(); // Initial state rendering
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
	    if (id === '_pn_setInterval'   ) _pn_setInterval    = value;
      if (id === '_pc_state0Colour'  ) _pc_state0Colour   = value;
      if (id === '_pc_state1Colour'  ) _pc_state1Colour   = value;
      if (id === '_pc_state2Colour'  ) _pc_state2Colour   = value;
      if (id === '_pc_state3Colour'  ) _pc_state3Colour   = value;
      if (id === '_pc_state4Colour'  ) _pc_state4Colour   = value;
      if (id === '_pc_state5Colour'  ) _pc_state5Colour   = value;
      if (id === '_pn_lightShade'    ) _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade'     ) _pn_darkShade      = value;
      if (id === '_pn_shadowShade'   ) _pn_shadowShade    = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Initialize the SVG
    init();

	// Function to update the color for the base shape group
    function setBaseColor(baseColor) {
      // Define color manipulations based on base color
      const darkColor   = percentColor(baseColor, _pn_darkShade);
      const shadowColor = percentColor(baseColor, _pn_shadowShade);
      const lightColor  = percentColor(baseColor, _pn_lightShade);
      const hlightColor = percentColor(baseColor, _pn_highLightShade);

	  document.getElementById('shape').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', baseColor);
      });
      document.getElementById('dark').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', darkColor);
      });
      document.getElementById('shadow').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', shadowColor);
      });
      document.getElementById('light').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', lightColor);
      });
	  document.getElementById('hlight').querySelectorAll('*').forEach(function(elem) {
      elem.setAttribute('fill', hlightColor);
      });
	}

    // Function to manipulate color brightness/darkness (-100% = Black) (0 = unchanged) (100% = White)
    function percentColor(color, percent) {
      let R = parseInt(color.substring(1, 3), 16);
      let G = parseInt(color.substring(3, 5), 16);
      let B = parseInt(color.substring(5, 7), 16);

      // Calculate the adjustment factor based on the percentage
      if (percent > 0) {
          // Lightening - move each channel closer to 255 (white)
          R = Math.round(R + (255 - R) * (percent / 100));
          G = Math.round(G + (255 - G) * (percent / 100));
          B = Math.round(B + (255 - B) * (percent / 100));
      } else {
          // Darkening - move each channel closer to 0 (black)
          R = Math.round(R * (1 + (percent / 100)));
          G = Math.round(G * (1 + (percent / 100)));
          B = Math.round(B * (1 + (percent / 100)));
      }

      // Clamp values to the [0, 255] range
      R = Math.max(0, Math.min(255, R));
      G = Math.max(0, Math.min(255, G));
      B = Math.max(0, Math.min(255, B));

      // Convert back to hexadecimal
      const RR = (R.toString(16).length === 1) ? "0" + R.toString(16) : R.toString(16);
      const GG = (G.toString(16).length === 1) ? "0" + G.toString(16) : G.toString(16);
      const BB = (B.toString(16).length === 1) ? "0" + B.toString(16) : B.toString(16);

      return "#" + RR + GG + BB;
    }

	// Function to start blinking between two colors
    function startBlinking(color1, color2, interval) {
      clearBlinking(); // Clear any existing blinking interval
    
      let isColor1 = true; 
      blinkInterval = setInterval(function() {
        const checkDestroy = document.getElementById('Layer_1'); // Important must be name of the SVG!
        if (!checkDestroy) {
          clearBlinking(); 
          return;
        }
        if (isColor1) {
          setBaseColor(color1); 
        } else {
          setBaseColor(color2); 
        }
        isColor1 = !isColor1; 
      }, interval);

      // Set up the MutationObserver to watch for removal of the SVG element
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.removedNodes.forEach((node) => {
            if (node.id === 'Layer_1') { // Important must be name of the SVG!
              clearBlinking(); 
              observer.disconnect(); 
            }
          });
        });
      });

      // Start observing the body or a parent element of the SVG
      observer.observe(document.body, { childList: true, subtree: true }); 
    }

    // Function to clear the blinking interval
    function clearBlinking() {
      if (blinkInterval) {
        clearInterval(blinkInterval);
        blinkInterval = null;
      }
    }

    ]]>
  </script>

</svg>